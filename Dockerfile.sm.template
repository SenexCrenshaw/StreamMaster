ARG TARGETPLATFORM
ARG TARGETARCH
ARG BUILDPLATFORM
ENV TARGETPLATFORM=${TARGETPLATFORM:-linux/amd64}
WORKDIR /src

# Copy all files into the image
COPY . .

# Step 1: Restore and build the .NET project with error-only output but keep echo messages
RUN echo "Starting .NET restore..." && \
    dotnet restore "StreamMaster.API/StreamMaster.API.csproj" -a $TARGETARCH --verbosity m && \
    echo ".NET restore completed successfully." || echo "Error during .NET restore!" && \
    \
    echo "Starting .NET build..." && \
    dotnet build "StreamMaster.API/StreamMaster.API.csproj" -c Debug -o /app/build -a $TARGETARCH --verbosity m && \
    echo ".NET build completed successfully." || echo "Error during .NET build!"

# Step 2: Install npm packages, build the frontend, and copy to wwwroot with error-only output but keep echo messages
RUN echo "Navigating to frontend directory: /src/streammasterwebui" && \
    cd /src/streammasterwebui && \
    echo "Installing npm dependencies..." && \
    npm install --silent && \
    echo "npm install completed successfully." || echo "Error during npm install!" && \
    \
    echo "Building frontend with npm run build..." && \
    npm run build --silent && \
    echo "Frontend build completed successfully." || echo "Error during frontend build!" && \
    \
    echo "Copying frontend build files to /src/StreamMaster.API/wwwroot/..." && \
    cp -r dist/* /src/StreamMaster.API/wwwroot/ && \
    echo "Files copied to wwwroot successfully." || echo "Error copying files to wwwroot!"

# Publish the .NET application with error-only output but keep echo messages
WORKDIR "/src/StreamMaster.API"
RUN echo "Publishing .NET application..." && \
    dotnet publish --no-restore "StreamMaster.API.csproj" -c Debug -o /app/publish /p:UseAppHost=false -a $TARGETARCH --verbosity m && \
    echo ".NET publish completed successfully." || echo "Error during .NET publish!"

# Download the latest release .deb from GitHub using curl
RUN echo "Fetching the latest release from GitHub..." && \
    LATEST_RELEASE_URL=$(curl -s https://api.github.com/repos/SenexCrenshaw/SMFS/releases/latest | jq -r '.assets[] | select(.name | endswith(".deb")).browser_download_url') && \
    echo "Downloading .deb package from: $LATEST_RELEASE_URL" && \
    curl -L -o /tmp/smfs_latest.deb "$LATEST_RELEASE_URL" && \
    echo "Installing the downloaded .deb package..." && \
    apt-get update && \
    dpkg -i /tmp/smfs_latest.deb || apt-get install -f -y && \
    rm -rf /tmp/smfs_latest.deb

# Clean up source files
RUN rm -rf /src
