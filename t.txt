[1mdiff --git a/StreamMaster.API/Controllers/MiscController.cs b/StreamMaster.API/Controllers/MiscController.cs[m
[1mindex 67b86241..c7b56b89 100644[m
[1m--- a/StreamMaster.API/Controllers/MiscController.cs[m
[1m+++ b/StreamMaster.API/Controllers/MiscController.cs[m
[36m@@ -1,5 +1,7 @@[m
 ï»¿using Microsoft.AspNetCore.Mvc;[m
 [m
[32m+[m[32musing StreamMaster.Streams.Handlers;[m
[32m+[m
 using System.Text;[m
 [m
 namespace StreamMaster.API.Controllers;[m
[36m@@ -16,7 +18,7 @@[m [mpublic class MiscController(IImageDownloadService imageDownloadService, IVideoIn[m
 [m
     [HttpGet][m
     [Route("[action]")][m
[31m-    public ActionResult<List<IChannelDistributor>> GetChannelDiGetChannelDistributors()[m
[32m+[m[32m    public ActionResult<List<ChannelDistributor>> GetChannelDiGetChannelDistributors()[m
     {[m
         List<IChannelDistributor> channelDistributors = channelDistributorService.GetChannelDistributors();[m
         return Ok(channelDistributors);[m
[1mdiff --git a/StreamMaster.API/Controllers/VideoStreamsController.cs b/StreamMaster.API/Controllers/VideoStreamsController.cs[m
[1mindex 206ba1f8..e404d31a 100644[m
[1m--- a/StreamMaster.API/Controllers/VideoStreamsController.cs[m
[1m+++ b/StreamMaster.API/Controllers/VideoStreamsController.cs[m
[36m@@ -42,9 +42,10 @@[m [mpublic class VideoStreamsController(IChannelManager channelManager, IClientConfi[m
             return new NotFoundResult();[m
         }[m
 [m
[31m-        StreamGroupProfile streamGroupProfile = await streamGroupService.GetStreamGroupProfileAsync(streamGroupId.Value, streamGroupProfileId.Value);[m
[32m+[m[32m        CommandProfileDto? commandProfileDto = await streamGroupService.GetProfileFromSMChannelDto(streamGroupId.Value, streamGroupProfileId.Value, smChannel.CommandProfileName);[m
 [m
[31m-        if (streamGroupProfile.OutputProfileName.Equals("Default", StringComparison.InvariantCultureIgnoreCase))[m
[32m+[m
[32m+[m[32m        if (commandProfileDto.ProfileName.Equals("Redirect", StringComparison.InvariantCultureIgnoreCase))[m
         {[m
             logger.LogInformation("GetVideoStreamStream request SG Number {id} ChannelId {channelId} proxy is none, sending redirect", streamGroupId.Value, smChannelId);[m
 [m
[36m@@ -63,7 +64,7 @@[m [mpublic class VideoStreamsController(IChannelManager channelManager, IClientConfi[m
         string originalUrl = $"{request.Scheme}://{request.Host}{request.PathBase}{request.Path}{request.QueryString}";[m
         smChannelDto.StreamUrl = originalUrl;[m
         string uniqueRequestId = request.HttpContext.TraceIdentifier;[m
[31m-        IClientConfiguration config = clientConfigurationService.NewClientConfiguration(uniqueRequestId, smChannelDto, streamGroupId.Value, 1, Request.Headers.UserAgent.ToString(), ipAddress ?? "unknown", HttpContext.Response, cancellationToken);[m
[32m+[m[32m        IClientConfiguration config = clientConfigurationService.NewClientConfiguration(uniqueRequestId, smChannelDto, streamGroupId.Value, streamGroupProfileId.Value, Request.Headers.UserAgent.ToString(), ipAddress ?? "unknown", HttpContext.Response, cancellationToken);[m
         Stream? stream = await channelManager.GetChannelStreamAsync(config, cancellationToken);[m
 [m
         HttpContext.Response.RegisterForDispose(new UnregisterClientOnDispose(channelManager, config));[m
[1mdiff --git a/StreamMaster.Application/Crypto/CryptoService.cs b/StreamMaster.Application/Crypto/CryptoService.cs[m
[1mindex da07438c..d2e7d8b2 100644[m
[1m--- a/StreamMaster.Application/Crypto/CryptoService.cs[m
[1m+++ b/StreamMaster.Application/Crypto/CryptoService.cs[m
[36m@@ -247,7 +247,6 @@[m [mpublic class CryptoService(IOptionsMonitor<Setting> intSettings, IStreamGroupSer[m
         if (values.Length == 2)[m
         {[m
             int streamGroupProfileId = int.Parse(values[1]);[m
[31m-            int smChannelId = int.Parse(values[2]);[m
             return (streamGroupId, streamGroupProfileId);[m
         }[m
 [m
[1mdiff --git a/StreamMaster.Application/Custom/Commands/ScanForCustomRequest.cs b/StreamMaster.Application/Custom/Commands/ScanForCustomRequest.cs[m
[1mindex 7b43839f..6e4bbf0f 100644[m
[1m--- a/StreamMaster.Application/Custom/Commands/ScanForCustomRequest.cs[m
[1m+++ b/StreamMaster.Application/Custom/Commands/ScanForCustomRequest.cs[m
[36m@@ -100,11 +100,11 @@[m [mpublic class ScanForCustomPlayListsRequestHandler(ILogger<ScanForCustomRequest>[m
                 SMStream newStream = new()[m
                 {[m
                     Id = streamId,[m
[31m-                    EPGID = EPGHelper.CustomPlayListId + "-" + nfo.Movie.Title,[m
[32m+[m[32m                    EPGID = EPGHelper.IntroPlayListId + "-" + nfo.Movie.Title,[m
                     Name = nfo.Movie.Title,[m
                     M3UFileName = Path.GetFileName(nfo.VideoFileName),[m
[31m-                    M3UFileId = EPGHelper.CustomPlayListId,[m
[31m-                    Group = "CustomPlayList",[m
[32m+[m[32m                    M3UFileId = EPGHelper.IntroPlayListId,[m
[32m+[m[32m                    Group = "Intros",[m
                     IsCustomStream = true,[m
                     Url = $"http://127.0.0.1:7095/m/{c}.ts"[m
                 };[m
[1mdiff --git a/StreamMaster.Application/Interfaces/IStreamGroupService.cs b/StreamMaster.Application/Interfaces/IStreamGroupService.cs[m
[1mindex 3069ba99..50056b21 100644[m
[1m--- a/StreamMaster.Application/Interfaces/IStreamGroupService.cs[m
[1m+++ b/StreamMaster.Application/Interfaces/IStreamGroupService.cs[m
[36m@@ -8,5 +8,6 @@[m [mpublic interface IStreamGroupService[m
     Task<StreamGroup> GetDefaultSGAsync();[m
     Task<int> GetDefaultSGIdAsync();[m
     Task<StreamGroupProfile> GetDefaultStreamGroupProfileAsync();[m
[32m+[m[32m    Task<CommandProfileDto> GetProfileFromSMChannelDto(int streamGroupId, int streamGroupProfileId, string CommandProfileName);[m
     Task<StreamGroupProfile> GetStreamGroupProfileAsync(int? StreamGroupId = null, int? StreamGroupProfileId = null);[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/StreamMaster.Application/M3UFiles/Commands/UpdateM3UFileRequest.cs b/StreamMaster.Application/M3UFiles/Commands/UpdateM3UFileRequest.cs[m
[1mindex 73a9537d..fe75ab27 100644[m
[1m--- a/StreamMaster.Application/M3UFiles/Commands/UpdateM3UFileRequest.cs[m
[1m+++ b/StreamMaster.Application/M3UFiles/Commands/UpdateM3UFileRequest.cs[m
[36m@@ -5,7 +5,7 @@[m [mnamespace StreamMaster.Application.M3UFiles.Commands;[m
 [m
 [SMAPI][m
 [TsInterface(AutoI = false, IncludeNamespace = false, FlattenHierarchy = true, AutoExportMethods = false)][m
[31m-public record UpdateM3UFileRequest(int? MaxStreamCount, int? StartingChannelNumber, string? DefaultStreamGroupName, bool? SyncChannels, List<string>? VODTags, bool? AutoUpdate, int? HoursToUpdate, int Id, string? Name, string? Url)[m
[32m+[m[32mpublic record UpdateM3UFileRequest(int? MaxStreamCount, int? StartingChannelNumber, string? DefaultStreamGroupName, bool? SyncChannels, List<string>? VODTags, bool? AutoSetChannelNumbers, bool? AutoUpdate, int? HoursToUpdate, int Id, string? Name, string? Url)[m
     : IRequest<APIResponse>;[m
 [m
 [LogExecutionTimeAspect][m
[36m@@ -32,11 +32,40 @@[m [mpublic class UpdateM3UFileRequestHandler(IRepositoryWrapper Repository, IReposit[m
             jobManager.Start();[m
 [m
             bool needsUpdate = false;[m
[32m+[m[32m            bool autoSetChannelNumbers = false;[m
             bool needsRefresh = false;[m
             bool nameChange = false;[m
             bool defaultNameChange = false;[m
             int oldSGId = 0;[m
 [m
[32m+[m
[32m+[m[32m            if (request.StartingChannelNumber.HasValue && m3uFile.StartingChannelNumber != request.StartingChannelNumber.Value)[m
[32m+[m[32m            {[m
[32m+[m[32m                m3uFile.StartingChannelNumber = request.StartingChannelNumber.Value;[m
[32m+[m[32m                autoSetChannelNumbers = true;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (request.AutoSetChannelNumbers.HasValue)[m
[32m+[m[32m            {[m
[32m+[m[32m                m3uFile.AutoSetChannelNumbers = request.AutoSetChannelNumbers.Value;[m
[32m+[m[32m                autoSetChannelNumbers = true;[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (autoSetChannelNumbers)[m
[32m+[m[32m            {[m
[32m+[m[32m                if (m3uFile.AutoSetChannelNumbers)[m
[32m+[m[32m                {[m
[32m+[m
[32m+[m[32m                    string sql = $"UPDATE public.\"SMStreams\" SET \"ChannelNumber\"=\"FilePosition\"+{m3uFile.StartingChannelNumber} WHERE \"M3UFileId\"={m3uFile.Id};";[m
[32m+[m[32m                    await repositoryContext.ExecuteSqlRawAsyncEntities(sql, cancellationToken);[m
[32m+[m[32m                    await dataRefreshService.RefreshSMStreams().ConfigureAwait(false);[m
[32m+[m[32m                }[m
[32m+[m[32m                else[m
[32m+[m[32m                {[m
[32m+[m[32m                    needsUpdate = true;[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m
             if (request.VODTags != null)[m
             {[m
                 m3uFile.VODTags = request.VODTags;[m
[36m@@ -62,7 +91,7 @@[m [mpublic class UpdateM3UFileRequestHandler(IRepositoryWrapper Repository, IReposit[m
             {[m
                 if (m3uFile.DefaultStreamGroupName != null)[m
                 {[m
[31m-                    var sg = await Repository.StreamGroup.GetStreamGroupByName(m3uFile.DefaultStreamGroupName);[m
[32m+[m[32m                    StreamGroupDto? sg = await Repository.StreamGroup.GetStreamGroupByName(m3uFile.DefaultStreamGroupName);[m
                     if (sg != null)[m
                     {[m
                         oldSGId = sg.Id;[m
[36m@@ -127,7 +156,7 @@[m [mpublic class UpdateM3UFileRequestHandler(IRepositoryWrapper Repository, IReposit[m
 [m
             if (needsUpdate)[m
             {[m
[31m-                ProcessM3UFileRequest processM3UFileRequest = new(m3uFile.Id);[m
[32m+[m[32m                ProcessM3UFileRequest processM3UFileRequest = new(m3uFile.Id, true);[m
                 await taskQueue.ProcessM3UFile(processM3UFileRequest, cancellationToken: cancellationToken).ConfigureAwait(false);[m
             }[m
 [m
[36m@@ -141,6 +170,12 @@[m [mpublic class UpdateM3UFileRequestHandler(IRepositoryWrapper Repository, IReposit[m
                 await dataRefreshService.Refresh("GetM3UFileNames").ConfigureAwait(false);[m
             }[m
             _ = await Repository.SaveAsync().ConfigureAwait(false);[m
[32m+[m
[32m+[m[32m            //if (request.AutoSetChannelNumbers.HasValue)[m
[32m+[m[32m            //{[m
[32m+[m[32m            //    await dataRefreshService.RefreshAllM3U().ConfigureAwait(false);[m
[32m+[m[32m            //}[m
[32m+[m
             jobManager.SetSuccessful();[m
             return APIResponse.Success;[m
         }[m
[1mdiff --git a/StreamMaster.Application/Profiles/ProfileService.cs b/StreamMaster.Application/Profiles/ProfileService.cs[m
[1mindex d1209c22..c13ad0ee 100644[m
[1m--- a/StreamMaster.Application/Profiles/ProfileService.cs[m
[1m+++ b/StreamMaster.Application/Profiles/ProfileService.cs[m
[36m@@ -26,4 +26,6 @@[m [mpublic class ProfileService(IOptionsMonitor<Setting> intSettings, IOptionsMonito[m
            : intOutProfileSettings.CurrentValue.GetDefaultProfileDto(settings.DefaultOutputProfileName);[m
         ;[m
     }[m
[32m+[m
[32m+[m
 }[m
[1mdiff --git a/StreamMaster.Application/SMChannels/Commands/CreateSMChannelRequest.cs b/StreamMaster.Application/SMChannels/Commands/CreateSMChannelRequest.cs[m
[1mindex 13d5a250..b98c4529 100644[m
[1m--- a/StreamMaster.Application/SMChannels/Commands/CreateSMChannelRequest.cs[m
[1m+++ b/StreamMaster.Application/SMChannels/Commands/CreateSMChannelRequest.cs[m
[36m@@ -8,6 +8,7 @@[m [mpublic record CreateSMChannelRequest([m
     string Name,[m
     List<string>? SMStreamsIds,[m
     string? CommandProfileName,[m
[32m+[m[32m     string? ClientUserAgent,[m
     int? ChannelNumber,[m
     int? TimeShift,[m
     string? Group,[m
[36m@@ -36,7 +37,8 @@[m [mpublic class CreateSMChannelRequestHandler(ILogger<CreateSMChannelRequest> Logge[m
                 Group = request.Group ?? "All",[m
                 EPGId = request.EPGId ?? string.Empty,[m
                 Logo = request.Logo ?? string.Empty,[m
[31m-                CommandProfileName = request.CommandProfileName ?? "Default"[m
[32m+[m[32m                CommandProfileName = request.CommandProfileName ?? "Default",[m
[32m+[m[32m                ClientUserAgent = request.ClientUserAgent[m
             };[m
 [m
             Repository.SMChannel.Create(smChannel);[m
[1mdiff --git a/StreamMaster.Application/SMChannels/Commands/UpdateSMChannelRequest.cs b/StreamMaster.Application/SMChannels/Commands/UpdateSMChannelRequest.cs[m
[1mindex 51edb3b8..c20d03a4 100644[m
[1m--- a/StreamMaster.Application/SMChannels/Commands/UpdateSMChannelRequest.cs[m
[1m+++ b/StreamMaster.Application/SMChannels/Commands/UpdateSMChannelRequest.cs[m
[36m@@ -3,7 +3,7 @@[m
 [m
 [SMAPI][m
 [TsInterface(AutoI = false, IncludeNamespace = false, FlattenHierarchy = true, AutoExportMethods = false)][m
[31m-public record UpdateSMChannelRequest(int Id, string? Name, List<string>? SMStreamsIds, string? CommandProfileName, int? ChannelNumber, int? TimeShift, string? Group, string? EPGId, string? Logo, VideoStreamHandlers? VideoStreamHandler)[m
[32m+[m[32mpublic record UpdateSMChannelRequest(int Id, string? Name, string? ClientUserAgent, List<string>? SMStreamsIds, string? CommandProfileName, int? ChannelNumber, int? TimeShift, string? Group, string? EPGId, string? Logo, VideoStreamHandlers? VideoStreamHandler)[m
     : IRequest<APIResponse>;[m
 [m
 [LogExecutionTimeAspect][m
[36m@@ -30,6 +30,11 @@[m [mpublic class UpdateSMChannelRequestHandler(IRepositoryWrapper Repository, IDataR[m
                 ret.Add(new FieldData(() => smChannel.Name));[m
             }[m
 [m
[32m+[m[32m            if (request.ClientUserAgent != null)[m
[32m+[m[32m            {[m
[32m+[m[32m                smChannel.ClientUserAgent = request.ClientUserAgent == "" ? null : request.ClientUserAgent;[m
[32m+[m[32m            }[m
[32m+[m
             if (!string.IsNullOrEmpty(request.Group) && request.Group != smChannel.Group)[m
             {[m
                 smChannel.Group = request.Group;[m
[1mdiff --git a/StreamMaster.Application/SMChannels/Queries/GetPagedSMChannelsRequest.cs b/StreamMaster.Application/SMChannels/Queries/GetPagedSMChannelsRequest.cs[m
[1mindex 9ce33d00..4da65818 100644[m
[1m--- a/StreamMaster.Application/SMChannels/Queries/GetPagedSMChannelsRequest.cs[m
[1m+++ b/StreamMaster.Application/SMChannels/Queries/GetPagedSMChannelsRequest.cs[m
[36m@@ -50,7 +50,9 @@[m [minternal class GetPagedSMChannelsRequestHandler(IRepositoryWrapper Repository, I[m
             channel.StreamGroupIds = channel.StreamGroups.Select(a => a.StreamGroupId).ToList();[m
 [m
 [m
[31m-            string? EncodedString = await cryptoService.EncodeStreamGroupIdChannelIdAsync(sgId, channel.Id);[m
[32m+[m[32m            StreamGroupProfile test = await streamGroupService.GetDefaultStreamGroupProfileAsync();[m
[32m+[m
[32m+[m[32m            string? EncodedString = await cryptoService.EncodeStreamGroupIdProfileIdChannelId(sgId, test.Id, channel.Id);[m
 [m
             //(string EncodedString, string CleanName) = await sender.Send(new EncodeStreamGroupIdProfileIdChannelId(defaultSGProfile.Data.StreamGroupId, defaultSGProfile.Data.Id, channel.Id, channel.Name), cancellationToken);[m
             if (string.IsNullOrEmpty(EncodedString))[m
[1mdiff --git a/StreamMaster.Application/Settings/Commands/UpdateSettingRequest.cs b/StreamMaster.Application/Settings/Commands/UpdateSettingRequest.cs[m
[1mindex 5ce04b6d..fe4dabb0 100644[m
[1m--- a/StreamMaster.Application/Settings/Commands/UpdateSettingRequest.cs[m
[1m+++ b/StreamMaster.Application/Settings/Commands/UpdateSettingRequest.cs[m
[36m@@ -33,7 +33,7 @@[m [mpublic class UpdateSettingParameters[m
 [m
     public string? DefaultOutputProfileName { get; set; }[m
     public string? DefaultCommandProfileName { get; set; }[m
[31m-    public string? StreamingClientUserAgent { get; set; }[m
[32m+[m[32m    //public string? StreamingClientUserAgent { get; set; }[m
     //public string? CommandProfileName { get; set; }[m
     //public bool? VideoStreamAlwaysUseEPGLogo { get; set; }[m
     //public bool? EnablePrometheus { get; set; }[m
[36m@@ -363,10 +363,10 @@[m [mpublic partial class UpdateSettingRequestHandler([m
             currentSetting.ClientUserAgent = request.Parameters.ClientUserAgent;[m
         }[m
 [m
[31m-        if (request.Parameters.StreamingClientUserAgent != null && request.Parameters.StreamingClientUserAgent != currentSetting.SourceClientUserAgent)[m
[31m-        {[m
[31m-            currentSetting.SourceClientUserAgent = request.Parameters.StreamingClientUserAgent;[m
[31m-        }[m
[32m+[m[32m        //if (request.Parameters.StreamingClientUserAgent != null && request.Parameters.StreamingClientUserAgent != currentSetting.SourceClientUserAgent)[m
[32m+[m[32m        //{[m
[32m+[m[32m        //    currentSetting.SourceClientUserAgent = request.Parameters.StreamingClientUserAgent;[m
[32m+[m[32m        //}[m
 [m
         //if (!string.IsNullOrEmpty(request.Parameters.ApiKey) && request.Parameters.ApiKey != currentSetting.ApiKey)[m
         //{[m
[1mdiff --git a/StreamMaster.Application/StreamGroups/Queries/GetStreamGroupM3U.cs b/StreamMaster.Application/StreamGroups/Queries/GetStreamGroupM3U.cs[m
[1mindex d598ebc4..eb1c9a5b 100644[m
[1m--- a/StreamMaster.Application/StreamGroups/Queries/GetStreamGroupM3U.cs[m
[1m+++ b/StreamMaster.Application/StreamGroups/Queries/GetStreamGroupM3U.cs[m
[36m@@ -126,21 +126,7 @@[m [mpublic class GetStreamGroupM3UHandler(IHttpContextAccessor httpContextAccessor,[m
                 CleanName = cleanName[m
             };[m
         }));[m
[31m-        ;[m
 [m
[31m-        //       // Retrieve necessary data in parallel[m
[31m-        //       var videoStreamData = smChannels[m
[31m-        //.AsParallel()[m
[31m-        //.WithDegreeOfParallelism(Environment.ProcessorCount)[m
[31m-        //.Select((smChannel, index) =>[m
[31m-        //{[m
[31m-        //    (int ChNo, string m3uLine) = BuildM3ULineForVideoStream(smChannel, url, request, profile, sgProfile.Id, settings, videoStreamConfigs);[m
[31m-        //    return new[m
[31m-        //    {[m
[31m-        //        ChNo,[m
[31m-        //        m3uLine[m
[31m-        //    };[m
[31m-        //}).ToList();[m
         OutputProfileDto outputProfile = profileService.GetOutputProfile(streamGroupProfile.OutputProfileName);[m
 [m
         var videoStreamData = encodedData[m
[1mdiff --git a/StreamMaster.Application/StreamGroups/StreamGroupService.cs b/StreamMaster.Application/StreamGroups/StreamGroupService.cs[m
[1mindex 7efc7388..dcdbff6d 100644[m
[1m--- a/StreamMaster.Application/StreamGroups/StreamGroupService.cs[m
[1m+++ b/StreamMaster.Application/StreamGroups/StreamGroupService.cs[m
[36m@@ -2,7 +2,7 @@[m
 [m
 namespace StreamMaster.Application.StreamGroups;[m
 [m
[31m-public class StreamGroupService(ILogger<StreamGroupService> logger, IMemoryCache _memoryCache, IProfileService profileService, IServiceProvider _serviceProvider)[m
[32m+[m[32mpublic class StreamGroupService(ILogger<StreamGroupService> logger, IOptionsMonitor<CommandProfiles> intCommandProfileSettings, IOptionsMonitor<Setting> intSettings, IMemoryCache _memoryCache, IProfileService profileService, IServiceProvider _serviceProvider)[m
     : IStreamGroupService[m
 {[m
     private const string DefaultStreamGroupName = "all";[m
[36m@@ -13,6 +13,25 @@[m [mpublic class StreamGroupService(ILogger<StreamGroupService> logger, IMemoryCache[m
         return sg.Id;[m
     }[m
 [m
[32m+[m[32m    public async Task<CommandProfileDto> GetProfileFromSMChannelDto(int streamGroupId, int streamGroupProfileId, string CommandProfileName)[m
[32m+[m[32m    {[m
[32m+[m[32m        CommandProfileDto? commandProfileDto = null;[m
[32m+[m[32m        if (!CommandProfileName.Equals("Default", StringComparison.InvariantCultureIgnoreCase))[m
[32m+[m[32m        {[m
[32m+[m[32m            commandProfileDto = intCommandProfileSettings.CurrentValue.GetProfileDto(CommandProfileName);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        if (commandProfileDto == null || commandProfileDto.ProfileName.Equals("Default", StringComparison.InvariantCultureIgnoreCase))[m
[32m+[m[32m        {[m
[32m+[m[32m            StreamGroupProfile streamGroupProfile = await GetStreamGroupProfileAsync(streamGroupId, streamGroupProfileId);[m
[32m+[m[32m            commandProfileDto = !streamGroupProfile.CommandProfileName.Equals("Default", StringComparison.InvariantCultureIgnoreCase)[m
[32m+[m[32m                ? intCommandProfileSettings.CurrentValue.GetProfileDto(streamGroupProfile.CommandProfileName)[m
[32m+[m[32m                : intCommandProfileSettings.CurrentValue.GetProfileDto(intSettings.CurrentValue.DefaultCommandProfileName);[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m        return commandProfileDto;[m
[32m+[m[32m    }[m
[32m+[m
     public async Task<(List<VideoStreamConfig> videoStreamConfigs, StreamGroupProfile streamGroupProfile)> GetStreamGroupVideoConfigs(int StreamGroupId, int StreamGroupProfileId)[m
     {[m
         using IServiceScope scope = _serviceProvider.CreateScope();[m
[36m@@ -91,23 +110,35 @@[m [mpublic class StreamGroupService(ILogger<StreamGroupService> logger, IMemoryCache[m
         IRepositoryWrapper repositoryWrapper = scope.ServiceProvider.GetRequiredService<IRepositoryWrapper>();[m
         if (StreamGroupProfileId.HasValue)[m
         {[m
[31m-            StreamGroupProfile? profile = repositoryWrapper.StreamGroupProfile.GetQuery().FirstOrDefault(a => a.Id == StreamGroupProfileId);[m
[31m-            if (profile != null)[m
[32m+[m[32m            StreamGroupProfile? sgProfile = repositoryWrapper.StreamGroupProfile.GetQuery().FirstOrDefault(a => a.Id == StreamGroupProfileId);[m
[32m+[m[32m            if (sgProfile != null)[m
             {[m
[31m-                return profile;[m
[32m+[m[32m                return sgProfile;[m
             }[m
         }[m
 [m
[31m-        StreamGroupProfile? sgProfile = repositoryWrapper.StreamGroupProfile.GetQuery().FirstOrDefault(a => a.StreamGroupId == StreamGroupId && a.ProfileName == "Default");[m
[31m-        if (sgProfile != null)[m
[32m+[m[32m        if (StreamGroupId.HasValue)[m
         {[m
[31m-            return sgProfile;[m
[32m+[m[32m            StreamGroupProfile? profile = repositoryWrapper.StreamGroupProfile.GetQuery().FirstOrDefault(a => a.StreamGroupId == StreamGroupId && a.ProfileName == "Default");[m
[32m+[m[32m            if (profile != null)[m
[32m+[m[32m            {[m
[32m+[m[32m                return profile;[m
[32m+[m[32m            }[m
         }[m
 [m
         StreamGroupProfile def = await GetDefaultStreamGroupProfileAsync();[m
         return def;[m
     }[m
 [m
[32m+[m[32m    private void UpdateStreamGroupProfile(StreamGroupProfile streamGroupProfile)[m
[32m+[m[32m    {[m
[32m+[m[32m        if (streamGroupProfile.OutputProfileName.Equals("Default", StringComparison.InvariantCultureIgnoreCase))[m
[32m+[m[32m        {[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m
     public async Task<StreamGroup?> GetStreamGroupFromIdAsync(int streamGroupId)[m
     {[m
         using IServiceScope scope = _serviceProvider.CreateScope();[m
[1mdiff --git a/StreamMaster.Domain/Configuration/CommandProfile.cs b/StreamMaster.Domain/Configuration/CommandProfile.cs[m
[1mindex 83d5e837..3d9a0fa3 100644[m
[1m--- a/StreamMaster.Domain/Configuration/CommandProfile.cs[m
[1m+++ b/StreamMaster.Domain/Configuration/CommandProfile.cs[m
[36m@@ -84,4 +84,5 @@[m [mpublic class CommandProfiles[m
         }[m
         return ret;[m
     }[m
[32m+[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/StreamMaster.Domain/Configuration/Setting.cs b/StreamMaster.Domain/Configuration/Setting.cs[m
[1mindex 42ff0e5f..7a87a13a 100644[m
[1m--- a/StreamMaster.Domain/Configuration/Setting.cs[m
[1m+++ b/StreamMaster.Domain/Configuration/Setting.cs[m
[36m@@ -36,7 +36,7 @@[m [mpublic class BaseSettings[m
     public string ShowIntros { get; set; } = "None";[m
     public string SSLCertPassword { get; set; } = string.Empty;[m
     public string SSLCertPath { get; set; } = string.Empty;[m
[31m-    public string SourceClientUserAgent { get; set; } = "VLC/3.0.20-git LibVLC/3.0.20-git";[m
[32m+[m[32m    //public string SourceClientUserAgent { get; set; } = "VLC/3.0.20-git LibVLC/3.0.20-git";[m
     public string UiFolder { get; set; } = "wwwroot";[m
     public string UrlBase { get; set; } = string.Empty;[m
     public bool VideoStreamAlwaysUseEPGLogo { get; set; } = true;[m
[1mdiff --git a/StreamMaster.Domain/Dto/M3UFileDto.cs b/StreamMaster.Domain/Dto/M3UFileDto.cs[m
[1mindex db42ba8e..90ad4e0f 100644[m
[1m--- a/StreamMaster.Domain/Dto/M3UFileDto.cs[m
[1m+++ b/StreamMaster.Domain/Dto/M3UFileDto.cs[m
[36m@@ -13,5 +13,7 @@[m [mpublic class M3UFileDto : BaseFileDto, IMapFrom<M3UFile>[m
     public int MaxStreamCount { get; set; }[m
     //public M3UFileStreamURLPrefix StreamURLPrefix { get; set; }[m
     public int StreamCount { get; set; }[m
[32m+[m[32m    public int StartingChannelNumber { get; set; }[m
[32m+[m[32m    public bool AutoSetChannelNumbers { get; set; }[m
 [m
 }[m
[1mdiff --git a/StreamMaster.Domain/Dto/SMStreamInfo.cs b/StreamMaster.Domain/Dto/SMStreamInfo.cs[m
[1mindex cb601586..60f18482 100644[m
[1m--- a/StreamMaster.Domain/Dto/SMStreamInfo.cs[m
[1m+++ b/StreamMaster.Domain/Dto/SMStreamInfo.cs[m
[36m@@ -1,4 +1,5 @@[m
 ï»¿using StreamMaster.Domain.Attributes;[m
[32m+[m[32musing StreamMaster.Domain.Configuration;[m
 using StreamMaster.Domain.Helpers;[m
 [m
 namespace StreamMaster.Domain.Dto;[m
[36m@@ -7,7 +8,7 @@[m [mnamespace StreamMaster.Domain.Dto;[m
 [TsInterface(AutoI = false, IncludeNamespace = false, FlattenHierarchy = true, AutoExportMethods = false)][m
 public class SMStreamInfo[m
 {[m
[31m-    public static SMStreamInfo NewSMStreamInfo(string name, bool isCustomStream)[m
[32m+[m[32m    public static SMStreamInfo NewSMStreamInfo(string name, CommandProfileDto CommandProfile, bool isCustomStream)[m
     {[m
         return new SMStreamInfo[m
         {[m
[36m@@ -15,9 +16,11 @@[m [mpublic class SMStreamInfo[m
             Name = name,[m
             Url = "",[m
             M3UFileId = EPGHelper.CustomPlayListId,[m
[31m-            IsCustomStream = isCustomStream[m
[32m+[m[32m            IsCustomStream = isCustomStream,[m
[32m+[m[32m            CommandProfile = CommandProfile[m
         };[m
     }[m
[32m+[m[32m    public required CommandProfileDto CommandProfile { get; set; }[m
     public required string Id { get; set; }[m
     public string? ClientUserAgent { get; set; } = null;[m
     public required string Name { get; set; } = string.Empty;[m
[1mdiff --git a/StreamMaster.Domain/Extensions/IPTVExtensions.cs b/StreamMaster.Domain/Extensions/IPTVExtensions.cs[m
[1mindex 0185606a..ea9f7e54 100644[m
[1m--- a/StreamMaster.Domain/Extensions/IPTVExtensions.cs[m
[1m+++ b/StreamMaster.Domain/Extensions/IPTVExtensions.cs[m
[36m@@ -40,7 +40,7 @@[m [mpublic static partial class IPTVExtensions[m
                             if (clientUserAgent != null)[m
                             {[m
 [m
[31m-                                var commadIndex = segmentBuilder.ToString().LastIndexOf(',');[m
[32m+[m[32m                                int commadIndex = segmentBuilder.ToString().LastIndexOf(',');[m
 [m
                                 segmentBuilder.Insert(commadIndex, $" clientUserAgent=\"{clientUserAgent}\" ");[m
                             }[m
[36m@@ -228,7 +228,7 @@[m [mpublic static partial class IPTVExtensions[m
                         case "cuid":[m
                             if (!string.IsNullOrEmpty(parameter[1].Trim()))[m
                             {[m
[31m-                                SMStream.Id = parameter[1].Trim();[m
[32m+[m[32m                                SMStream.CUID = parameter[1].Trim();[m
                             }[m
                             break;[m
 [m
[36m@@ -247,12 +247,12 @@[m [mpublic static partial class IPTVExtensions[m
                             }[m
                             break;[m
 [m
[31m-                        case "channel-id":[m
[31m-                            if (!string.IsNullOrEmpty(parameter[1].Trim()))[m
[31m-                            {[m
[31m-                                SMStream.Id = parameter[1].Trim();[m
[31m-                            }[m
[31m-                            break;[m
[32m+[m[32m                        //case "channel-id":[m
[32m+[m[32m                        //    if (!string.IsNullOrEmpty(parameter[1].Trim()))[m
[32m+[m[32m                        //    {[m
[32m+[m[32m                        //        SMStream.Id = parameter[1].Trim();[m
[32m+[m[32m                        //    }[m
[32m+[m[32m                        //    break;[m
 [m
                         case "channel-number":[m
                             if (!string.IsNullOrEmpty(parameter[1].Trim()))[m
[36m@@ -341,14 +341,12 @@[m [mpublic static partial class IPTVExtensions[m
 [m
         if (string.IsNullOrEmpty(SMStream.Id))[m
         {[m
[31m-            SMStream.Id = FileUtil.EncodeToBase64(SMStream.Url);//.ConvertStringToId();[m
[32m+[m[32m            SMStream.Id = FileUtil.EncodeToBase64(SMStream.Url);[m
         }[m
 [m
         return SMStream;[m
     }[m
 [m
[31m-    //[GeneratedRegex("#EXTGRP: *(.*)", RegexOptions.IgnoreCase | RegexOptions.Compiled, "en-US")][m
[31m-    //private static partial Regex grpRegex();[m
 [m
     [GeneratedRegex(",([^\\n]*|,[^\\r]*)", RegexOptions.IgnoreCase | RegexOptions.Compiled, "en-US")][m
     private static partial Regex nameRegex();[m
[1mdiff --git a/StreamMaster.Domain/Helpers/EPGHelper.cs b/StreamMaster.Domain/Helpers/EPGHelper.cs[m
[1mindex ecd2d77e..02fb8c47 100644[m
[1m--- a/StreamMaster.Domain/Helpers/EPGHelper.cs[m
[1m+++ b/StreamMaster.Domain/Helpers/EPGHelper.cs[m
[36m@@ -9,6 +9,7 @@[m [mpublic class EPGHelper() : IEPGHelper[m
     public const int SchedulesDirectId = -1;[m
     public const int DummyId = -2;[m
     public const int CustomPlayListId = -3;[m
[32m+[m[32m    public const int IntroPlayListId = -4;[m
     public const string EPGMatch = @"(^\-?\d+)-(.*)";[m
 [m
     public (int epgNumber, string stationId) ExtractEPGNumberAndStationId(string epgId)[m
[1mdiff --git a/StreamMaster.Domain/Models/M3UFile.cs b/StreamMaster.Domain/Models/M3UFile.cs[m
[1mindex 17ba969e..f5ba2321 100644[m
[1m--- a/StreamMaster.Domain/Models/M3UFile.cs[m
[1m+++ b/StreamMaster.Domain/Models/M3UFile.cs[m
[36m@@ -26,6 +26,9 @@[m [mpublic class M3UFile : AutoUpdateEntity[m
     public int MaxStreamCount { get; set; }[m
     public int StreamCount { get; set; }[m
     public bool SyncChannels { get; set; }[m
[32m+[m[32m    public int StartingChannelNumber { get; set; }[m
[32m+[m[32m    public bool AutoSetChannelNumbers { get; set; }[m
[32m+[m
     //public string? DefaultGroup { get; set; }[m
     public string? DefaultStreamGroupName { get; set; }[m
 [m
[1mdiff --git a/StreamMaster.Domain/Models/SMChannel.cs b/StreamMaster.Domain/Models/SMChannel.cs[m
[1mindex da2872fb..4d91770f 100644[m
[1m--- a/StreamMaster.Domain/Models/SMChannel.cs[m
[1m+++ b/StreamMaster.Domain/Models/SMChannel.cs[m
[36m@@ -61,6 +61,9 @@[m [mpublic class SMChannel[m
     [Column(TypeName = "citext")][m
     public string Name { get; set; } = string.Empty;[m
 [m
[32m+[m[32m    [Column(TypeName = "citext")][m
[32m+[m[32m    public string? ClientUserAgent = string.Empty;[m
[32m+[m
     [Column(TypeName = "citext")][m
     public string StationId { get; set; } = string.Empty;[m
 [m
[1mdiff --git a/StreamMaster.Domain/Models/SMStream.cs b/StreamMaster.Domain/Models/SMStream.cs[m
[1mindex 882458fa..12854c09 100644[m
[1m--- a/StreamMaster.Domain/Models/SMStream.cs[m
[1m+++ b/StreamMaster.Domain/Models/SMStream.cs[m
[36m@@ -27,6 +27,7 @@[m [mpublic class SMStream[m
     [Column(TypeName = "citext")][m
     public string EPGID { get; set; } = "Dummy";[m
     [Column(TypeName = "citext")][m
[32m+[m
     public string Logo { get; set; } = string.Empty;[m
     [Column(TypeName = "citext")][m
     public string Name { get; set; } = string.Empty;[m
[36m@@ -36,4 +37,8 @@[m [mpublic class SMStream[m
     public string StationId { get; set; } = string.Empty;[m
 [m
     public bool IsSystem { get; set; }[m
[32m+[m
[32m+[m[32m    [Column(TypeName = "citext")][m
[32m+[m
[32m+[m[32m    public string CUID { get; set; } = string.Empty;[m
 }[m
[1mdiff --git a/StreamMaster.Infrastructure.EF.PGSQL/Migrations/Repository/PGSQLRepositoryContextModelSnapshot.cs b/StreamMaster.Infrastructure.EF.PGSQL/Migrations/Repository/PGSQLRepositoryContextModelSnapshot.cs[m
[1mindex 6ba98535..e30c72e1 100644[m
[1m--- a/StreamMaster.Infrastructure.EF.PGSQL/Migrations/Repository/PGSQLRepositoryContextModelSnapshot.cs[m
[1m+++ b/StreamMaster.Infrastructure.EF.PGSQL/Migrations/Repository/PGSQLRepositoryContextModelSnapshot.cs[m
[36m@@ -40,7 +40,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasKey("Id");[m
 [m
[31m-                    b.ToTable("DataProtectionKeys", (string)null);[m
[32m+[m[32m                    b.ToTable("DataProtectionKeys");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.ChannelGroup", b =>[m
[36m@@ -85,7 +85,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
                     b.HasIndex("Name", "IsHidden")[m
                         .HasDatabaseName("idx_Name_IsHidden");[m
 [m
[31m-                    b.ToTable("ChannelGroups", (string)null);[m
[32m+[m[32m                    b.ToTable("ChannelGroups");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.EPGFile", b =>[m
[36m@@ -160,7 +160,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasKey("Id");[m
 [m
[31m-                    b.ToTable("EPGFiles", (string)null);[m
[32m+[m[32m                    b.ToTable("EPGFiles");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.M3UFile", b =>[m
[36m@@ -171,6 +171,9 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));[m
 [m
[32m+[m[32m                    b.Property<bool>("AutoSetChannelNumbers")[m
[32m+[m[32m                        .HasColumnType("boolean");[m
[32m+[m
                     b.Property<bool>("AutoUpdate")[m
                         .HasColumnType("boolean");[m
 [m
[36m@@ -220,6 +223,9 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
                         .IsRequired()[m
                         .HasColumnType("citext");[m
 [m
[32m+[m[32m                    b.Property<int>("StartingChannelNumber")[m
[32m+[m[32m                        .HasColumnType("integer");[m
[32m+[m
                     b.Property<int>("StreamCount")[m
                         .HasColumnType("integer");[m
 [m
[36m@@ -235,7 +241,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasKey("Id");[m
 [m
[31m-                    b.ToTable("M3UFiles", (string)null);[m
[32m+[m[32m                    b.ToTable("M3UFiles");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.SMChannel", b =>[m
[36m@@ -304,7 +310,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
                     b.HasIndex("Name")[m
                         .HasDatabaseName("idx_SMChannelName");[m
 [m
[31m-                    b.ToTable("SMChannels", (string)null);[m
[32m+[m[32m                    b.ToTable("SMChannels");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.SMChannelChannelLink", b =>[m
[36m@@ -322,7 +328,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasIndex("ChildSMChannelId");[m
 [m
[31m-                    b.ToTable("SMChannelChannelLinks", (string)null);[m
[32m+[m[32m                    b.ToTable("SMChannelChannelLinks");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.SMChannelStreamLink", b =>[m
[36m@@ -340,7 +346,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasIndex("SMStreamId");[m
 [m
[31m-                    b.ToTable("SMChannelStreamLinks", (string)null);[m
[32m+[m[32m                    b.ToTable("SMChannelStreamLinks");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.SMStream", b =>[m
[36m@@ -348,6 +354,10 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
                     b.Property<string>("Id")[m
                         .HasColumnType("text");[m
 [m
[32m+[m[32m                    b.Property<string>("CUID")[m
[32m+[m[32m                        .IsRequired()[m
[32m+[m[32m                        .HasColumnType("citext");[m
[32m+[m
                     b.Property<int>("ChannelNumber")[m
                         .HasColumnType("integer");[m
 [m
[36m@@ -405,7 +415,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
                     b.HasIndex("Name")[m
                         .HasDatabaseName("idx_SMStreamName");[m
 [m
[31m-                    b.ToTable("SMStreams", (string)null);[m
[32m+[m[32m                    b.ToTable("SMStreams");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.StreamGroup", b =>[m
[36m@@ -439,7 +449,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasKey("Id");[m
 [m
[31m-                    b.ToTable("StreamGroups", (string)null);[m
[32m+[m[32m                    b.ToTable("StreamGroups");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.StreamGroupChannelGroup", b =>[m
[36m@@ -454,7 +464,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasIndex("StreamGroupId");[m
 [m
[31m-                    b.ToTable("StreamGroupChannelGroups", (string)null);[m
[32m+[m[32m                    b.ToTable("StreamGroupChannelGroups");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.StreamGroupProfile", b =>[m
[36m@@ -484,7 +494,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasIndex("StreamGroupId");[m
 [m
[31m-                    b.ToTable("StreamGroupProfiles", (string)null);[m
[32m+[m[32m                    b.ToTable("StreamGroupProfiles");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.StreamGroupSMChannelLink", b =>[m
[36m@@ -505,7 +515,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasIndex("SMChannelId");[m
 [m
[31m-                    b.ToTable("StreamGroupSMChannelLink", (string)null);[m
[32m+[m[32m                    b.ToTable("StreamGroupSMChannelLink");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.SystemKeyValue", b =>[m
[36m@@ -526,7 +536,7 @@[m [mnamespace StreamMaster.Infrastructure.EF.PGSQL.Migrations.Repository[m
 [m
                     b.HasKey("Id");[m
 [m
[31m-                    b.ToTable("SystemKeyValues", (string)null);[m
[32m+[m[32m                    b.ToTable("SystemKeyValues");[m
                 });[m
 [m
             modelBuilder.Entity("StreamMaster.Domain.Models.SMChannelChannelLink", b =>[m
[1mdiff --git a/StreamMaster.Infrastructure.EF/Repositories/M3UFileRepository.cs b/StreamMaster.Infrastructure.EF/Repositories/M3UFileRepository.cs[m
[1mindex e8809195..953701f9 100644[m
[1m--- a/StreamMaster.Infrastructure.EF/Repositories/M3UFileRepository.cs[m
[1m+++ b/StreamMaster.Infrastructure.EF/Repositories/M3UFileRepository.cs[m
[36m@@ -384,12 +384,17 @@[m [mpublic class M3UFileRepository(ILogger<M3UFileRepository> intLogger, IMessageSer[m
                 if (!existingLookup.TryGetValue(stream.Id, out SMStream? existingStream))[m
                 {[m
                     ProcessNewStream(stream, group?.IsHidden ?? false, m3uFile.Name, index);[m
[32m+[m[32m                    if (m3uFile.AutoSetChannelNumbers)[m
[32m+[m[32m                    {[m
[32m+[m[32m                        stream.ChannelNumber = index + m3uFile.StartingChannelNumber;[m
[32m+[m[32m                    }[m
                     toWrite.Add(stream);[m
                 }[m
                 else[m
                 {[m
                     if (ProcessExistingStream(stream, existingStream, m3uFile, index))[m
                     {[m
[32m+[m
                         toUpdate.Add(existingStream);[m
                     }[m
                 }[m
[36m@@ -434,6 +439,11 @@[m [mpublic class M3UFileRepository(ILogger<M3UFileRepository> intLogger, IMessageSer[m
             existingStream.M3UFileName = m3uFile.Name;[m
         }[m
 [m
[32m+[m[32m        if (m3uFile.AutoSetChannelNumbers)[m
[32m+[m[32m        {[m
[32m+[m[32m            stream.ChannelNumber = index + m3uFile.StartingChannelNumber;[m
[32m+[m[32m        }[m
[32m+[m
         if (existingStream.ChannelNumber != stream.ChannelNumber)[m
         {[m
             changed = true;[m
[36m@@ -490,6 +500,7 @@[m [mpublic class M3UFileRepository(ILogger<M3UFileRepository> intLogger, IMessageSer[m
         }[m
         stream.FilePosition = index;[m
         stream.M3UFileName = mu3FileName;[m
[32m+[m
     }[m
     private void ProcessBatches(ConcurrentBag<SMStream> toWrite, ConcurrentBag<SMStream> toUpdate)[m
     {[m
[1mdiff --git a/StreamMaster.Infrastructure.EF/Repositories/SMChannelsRepository.cs b/StreamMaster.Infrastructure.EF/Repositories/SMChannelsRepository.cs[m
[1mindex 0378c560..54e7328f 100644[m
[1m--- a/StreamMaster.Infrastructure.EF/Repositories/SMChannelsRepository.cs[m
[1m+++ b/StreamMaster.Infrastructure.EF/Repositories/SMChannelsRepository.cs[m
[36m@@ -205,7 +205,7 @@[m [mpublic class SMChannelsRepository(ILogger<SMChannelsRepository> intLogger, IRepo[m
             BaseStreamID = smStream.Id,[m
             IsCustomStream = smStream.IsCustomStream,[m
             IsSystem = smStream.IsSystem,[m
[31m-            CommandProfileName = M3UFileId == EPGHelper.CustomPlayListId ? "StreamMaster" : "Default",[m
[32m+[m[32m            CommandProfileName = "Default",[m
         };[m
 [m
         await CreateSMChannel(smChannel);[m
[1mdiff --git a/StreamMaster.Streams.Domain/Interfaces/IChannelDistributorService.cs b/StreamMaster.Streams.Domain/Interfaces/IChannelDistributorService.cs[m
[1mindex 689b7c5b..0fdab28e 100644[m
[1m--- a/StreamMaster.Streams.Domain/Interfaces/IChannelDistributorService.cs[m
[1m+++ b/StreamMaster.Streams.Domain/Interfaces/IChannelDistributorService.cs[m
[36m@@ -11,6 +11,6 @@[m [mnamespace StreamMaster.Streams.Domain.Interfaces[m
         Task<IChannelDistributor?> GetOrCreateSourceChannelDistributorAsync(SMStreamInfo smStreamInfo, CancellationToken cancellationToken);[m
         bool StopAndUnRegister(string key);[m
         List<IChannelDistributor> GetChannelDistributors();[m
[31m-        Task<IChannelDistributor?> CreateChannelDistributorFromSMChannelDtoAsync(SMChannelDto smChannel, CancellationToken cancellationToken);[m
[32m+[m[32m        Task<IChannelDistributor?> CreateChannelDistributorFromSMChannelDtoAsync(SMChannelDto smChannel, IChannelStatus channelStatus, CancellationToken cancellationToken);[m
     }[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/StreamMaster.Streams.Domain/Interfaces/IChannelStatus.cs b/StreamMaster.Streams.Domain/Interfaces/IChannelStatus.cs[m
[1mindex 834cc410..4bb7d0b8 100644[m
[1m--- a/StreamMaster.Streams.Domain/Interfaces/IChannelStatus.cs[m
[1m+++ b/StreamMaster.Streams.Domain/Interfaces/IChannelStatus.cs[m
[36m@@ -5,6 +5,7 @@[m [mnamespace StreamMaster.Streams.Domain.Interfaces;[m
 [m
 public interface IStreamStatus : IIntroStatus[m
 {[m
[32m+[m[32m    CommandProfileDto CommandProfile { get; set; }[m
     string? OverrideSMStreamId { get; set; }[m
     CustomPlayList? CustomPlayList { get; set; }[m
     bool Shutdown { get; set; }[m
[36m@@ -21,14 +22,14 @@[m [mpublic interface IStreamStatus : IIntroStatus[m
 public interface IChannelStatus : IStreamStatus[m
 {[m
     int StreamGroupProfileId { get; set; }[m
[31m-    CommandProfileDto CommandProfile { get; set; }[m
[32m+[m
     void SetIsGlobal();[m
[31m-    void SetSourceChannel(IChannelDistributor channelDistributor, string Name, bool IsCustom);[m
[32m+[m[32m    void SetSourceChannel(IChannelDistributor channelDistributor, string Name, CommandProfileDto CommandProfile, bool IsCustom);[m
 [m
     void AddClient(string UniqueRequestId, IClientConfiguration config);[m
     bool RemoveClient(string UniqueRequestId);[m
     int ClientCount { get; }[m
[31m-    IChannelDistributor ChannelDistributor { get; }[m
[32m+[m[32m    IChannelDistributor ChannelDistributor { get; set; }[m
     bool IsGlobal { get; set; }[m
     List<IClientConfiguration> GetClientStreamerConfigurations();[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/StreamMaster.Streams.Domain/Interfaces/IChannelStatusService.cs b/StreamMaster.Streams.Domain/Interfaces/IChannelStatusService.cs[m
[1mindex 4276b4e3..5e8ac7fd 100644[m
[1m--- a/StreamMaster.Streams.Domain/Interfaces/IChannelStatusService.cs[m
[1m+++ b/StreamMaster.Streams.Domain/Interfaces/IChannelStatusService.cs[m
[36m@@ -2,6 +2,7 @@[m
 {[m
     public interface IChannelStatusService[m
     {[m
[31m-        IChannelStatus NewChannelStatus(SMChannelDto smChannel);[m
[32m+[m
[32m+[m[32m        Task<IChannelStatus> NewChannelStatus(SMChannelDto smChannel);[m
     }[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/StreamMaster.Streams.Domain/Interfaces/IClientConfiguration.cs b/StreamMaster.Streams.Domain/Interfaces/IClientConfiguration.cs[m
[1mindex c94e6c79..cb2736c6 100644[m
[1m--- a/StreamMaster.Streams.Domain/Interfaces/IClientConfiguration.cs[m
[1m+++ b/StreamMaster.Streams.Domain/Interfaces/IClientConfiguration.cs[m
[36m@@ -13,6 +13,7 @@[m [mpublic interface IClientConfiguration[m
     HttpResponse Response { get; }[m
     string UniqueRequestId { get; }[m
     int StreamGroupProfileId { get; }[m
[32m+[m[32m    int StreamGroupId { get; }[m
     //CancellationTokenSource ClientMasterToken { get; set; }[m
     //Task CancelClient(bool includeResponse = true);[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/StreamMaster.Streams.Domain/Models/M3U8ChannelStatus.cs b/StreamMaster.Streams.Domain/Models/M3U8ChannelStatus.cs[m
[1mindex d1431051..3129a6fe 100644[m
[1m--- a/StreamMaster.Streams.Domain/Models/M3U8ChannelStatus.cs[m
[1m+++ b/StreamMaster.Streams.Domain/Models/M3U8ChannelStatus.cs[m
[36m@@ -15,6 +15,7 @@[m [mpublic sealed class M3U8ChannelStatus(SMChannelDto sMChannelDto) : IntroStatus,[m
     public string ClientUserAgent { get; set; } = string.Empty;[m
     public string M3U8File { get; private set; }[m
     public string M3U8Directory { get; private set; }[m
[32m+[m[32m    public CommandProfileDto CommandProfile { get; set; }[m
 [m
     public void SetSMStreamInfo(SMStreamInfo? idNameUrl)[m
     {[m
[1mdiff --git a/StreamMaster.Streams/ChannelStatus.cs b/StreamMaster.Streams/ChannelStatus.cs[m
[1mindex f23da626..2a9ab1a4 100644[m
[1m--- a/StreamMaster.Streams/ChannelStatus.cs[m
[1m+++ b/StreamMaster.Streams/ChannelStatus.cs[m
[36m@@ -10,6 +10,7 @@[m [mpublic sealed class ChannelStatus : IntroStatus, IChannelStatus, IDisposable[m
 {[m
     private readonly IChannelDistributorService channelDistributorService;[m
     private readonly IVideoInfoService VideoInfoService;[m
[32m+[m[32m    private CommandProfileDto commandProfile;[m
 [m
     public ChannelStatus(ILogger<IChannelStatus> logger, IVideoInfoService VideoInfoService, IChannelDistributorService channelDistributorService, IDubcer Dubcer, SMChannelDto smChannel)[m
     {[m
[36m@@ -27,6 +28,7 @@[m [mpublic sealed class ChannelStatus : IntroStatus, IChannelStatus, IDisposable[m
     private ConcurrentDictionary<string, IClientConfiguration> ClientStreamerConfigurations { get; } = new();[m
     public bool Shutdown { get; set; } = false;[m
     public bool IsStarted { get; set; }[m
[32m+[m
     public SMStreamInfo? SMStreamInfo { get; private set; }[m
     public bool IsGlobal { get; set; }[m
     public bool FailoverInProgress { get; set; }[m
[36m@@ -37,7 +39,17 @@[m [mpublic sealed class ChannelStatus : IntroStatus, IChannelStatus, IDisposable[m
 [m
     public int StreamGroupId { get; set; }[m
     public int StreamGroupProfileId { get; set; }[m
[31m-    public CommandProfileDto CommandProfile { get; set; }[m
[32m+[m[32m    public CommandProfileDto CommandProfile[m
[32m+[m[32m    {[m
[32m+[m[32m        get => commandProfile; set[m
[32m+[m[32m        {[m
[32m+[m[32m            if (commandProfile != value)[m
[32m+[m[32m            {[m
[32m+[m[32m                commandProfile = value;[m
[32m+[m[32m                SMStreamInfo = SMStreamInfo.NewSMStreamInfo(SMChannel.Name, CommandProfile, SMChannel.IsCustomStream);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
     public CustomPlayList? CustomPlayList { get; set; }[m
 [m
     public IChannelDistributor ChannelDistributor { get; set; }[m
[36m@@ -83,10 +95,10 @@[m [mpublic sealed class ChannelStatus : IntroStatus, IChannelStatus, IDisposable[m
         IsGlobal = true;[m
     }[m
 [m
[31m-    public void SetSourceChannel(IChannelDistributor sourceChannelDistributor, string Name, bool IsCustom)[m
[32m+[m[32m    public void SetSourceChannel(IChannelDistributor sourceChannelDistributor, string Name, CommandProfileDto CommandProfile, bool IsCustom)[m
     {[m
         Channel<byte[]> channel = ChannelHelper.GetChannel(IsCustom);[m
[31m-[m
[32m+[m[32m        //ChannelDistributor = sourceChannelDistributor;[m
         sourceChannelDistributor.AddClientChannel(SMChannel.Id, channel.Writer);[m
 [m
         //if (!sourceChannelDistributor.SMStreamInfo.Id.StartsWith(IntroPlayListBuilder.IntroIDPrefix, StringComparison.InvariantCulture))[m
[1mdiff --git a/StreamMaster.Streams/ChannelStatusService.cs b/StreamMaster.Streams/ChannelStatusService.cs[m
[1mindex 7dd6e8e7..f4635668 100644[m
[1m--- a/StreamMaster.Streams/ChannelStatusService.cs[m
[1m+++ b/StreamMaster.Streams/ChannelStatusService.cs[m
[36m@@ -3,13 +3,13 @@[m
 public sealed class ChannelStatusService(ILogger<IChannelStatus> logger, IVideoInfoService videoInfoService, IChannelDistributorService channelDistributorService, IDubcer Dubcer)[m
     : IChannelStatusService[m
 {[m
[31m-    public IChannelStatus NewChannelStatus(SMChannelDto smChannel)[m
[32m+[m[32m    public async Task<IChannelStatus> NewChannelStatus(SMChannelDto smChannel)[m
     {[m
[31m-        ChannelStatus channelStatus = new(logger, videoInfoService, channelDistributorService, Dubcer, smChannel);[m
[31m-        IChannelDistributor? channelDistributor = channelDistributorService.CreateChannelDistributorFromSMChannelDtoAsync(smChannel, CancellationToken.None).Result;[m
[32m+[m[32m        IChannelStatus channelStatus = new ChannelStatus(logger, videoInfoService, channelDistributorService, Dubcer, smChannel);[m
[32m+[m[32m        IChannelDistributor? channelDistributor = await channelDistributorService.CreateChannelDistributorFromSMChannelDtoAsync(smChannel, channelStatus, CancellationToken.None);[m
         if (channelDistributor == null)[m
         {[m
[31m-            int a = 1;[m
[32m+[m[32m            throw new ApplicationException("channelDistributor == null");[m
         }[m
         channelStatus.ChannelDistributor = channelDistributor;[m
         return channelStatus;[m
[1mdiff --git a/StreamMaster.Streams/Channels/ChannelService.cs b/StreamMaster.Streams/Channels/ChannelService.cs[m
[1mindex ca24c543..350ee0b2 100644[m
[1m--- a/StreamMaster.Streams/Channels/ChannelService.cs[m
[1m+++ b/StreamMaster.Streams/Channels/ChannelService.cs[m
[36m@@ -16,6 +16,7 @@[m [mpublic sealed class ChannelService : IChannelService, IDisposable[m
     private readonly IDubcer dubcer;[m
     private readonly IChannelDistributorService channelDistributorService;[m
     private readonly IChannelStatusService channelStatusService;[m
[32m+[m[32m    private readonly IStreamGroupService streamGroupService;[m
 [m
     private readonly object _disposeLock = new();[m
     private bool _disposed = false;[m
[36m@@ -28,12 +29,14 @@[m [mpublic sealed class ChannelService : IChannelService, IDisposable[m
         IProfileService profileService,[m
         ICustomPlayListBuilder customPlayListBuilder,[m
         IOptionsMonitor<Setting> intSettings,[m
[32m+[m[32m        IStreamGroupService streamGroupService,[m
         ISwitchToNextStreamService switchToNextStreamService,[m
         IChannelStatusService channelStatusService,[m
 [m
          IClientStatisticsManager statisticsManager[m
     )[m
     {[m
[32m+[m[32m        this.streamGroupService = streamGroupService;[m
         this.channelDistributorService = channelDistributorService;[m
         this.profileService = profileService;[m
         this.switchToNextStreamService = switchToNextStreamService;[m
[36m@@ -42,7 +45,7 @@[m [mpublic sealed class ChannelService : IChannelService, IDisposable[m
         this.channelStatusLogger = channelStatusLogger;[m
         this.statisticsManager = statisticsManager;[m
         this.dubcer = dubcer;[m
[31m-        this.logger = logger ?? throw new ArgumentNullException(nameof(logger));[m
[32m+[m[32m        this.logger = logger;[m
         this.channelDistributorService.OnStoppedEvent += ChannelDistributorService_OnStoppedEvent;[m
         this.channelStatusService = channelStatusService;[m
     }[m
[36m@@ -134,18 +137,16 @@[m [mpublic sealed class ChannelService : IChannelService, IDisposable[m
             logger.LogInformation("No existing channel for {UniqueRequestId} {ChannelVideoStreamId} {name}",[m
                               config.UniqueRequestId, config.SMChannel.Id, config.SMChannel.Name);[m
 [m
[31m-            CommandProfileDto commandProfileData = profileService.GetCommandProfile();[m
[31m-            if (commandProfileData == null)[m
[32m+[m[32m            //CommandProfileDto commandProfileData = profileService.GetCommandProfile(config.SMChannel.CommandProfileName);[m
[32m+[m[32m            CommandProfileDto commandProfileDto = await streamGroupService.GetProfileFromSMChannelDto(config.StreamGroupId, config.StreamGroupProfileId, config.SMChannel.CommandProfileName);[m
[32m+[m[32m            if (commandProfileDto == null)[m
             {[m
                 logger.LogError("Could not find command profile");[m
                 return null;[m
             }[m
[31m-[m
[31m-            channelStatus = channelStatusService.NewChannelStatus(config.SMChannel);[m
[32m+[m[32m            channelStatus = await channelStatusService.NewChannelStatus(config.SMChannel);[m
             channelStatus.StreamGroupProfileId = config.StreamGroupProfileId;[m
[31m-            channelStatus.CommandProfile = commandProfileData;[m
[31m-[m
[31m-[m
[32m+[m[32m            channelStatus.CommandProfile = commandProfileDto;[m
             _channelStatuses.TryAdd(config.SMChannel.Id, channelStatus);[m
 [m
             if (!await SwitchChannelToNextStream(channelStatus).ConfigureAwait(false))[m
[36m@@ -202,7 +203,7 @@[m [mpublic sealed class ChannelService : IChannelService, IDisposable[m
         IChannelStatus? channelStatus = GetChannelStatus(smChannel.Id);[m
         if (channelStatus == null)[m
         {[m
[31m-            channelStatus = channelStatusService.NewChannelStatus(smChannel);[m
[32m+[m[32m            channelStatus = await channelStatusService.NewChannelStatus(smChannel);[m
             channelStatus.CommandProfile = new CommandProfileDto();[m
 [m
             if (!await switchToNextStreamService.SetNextStreamAsync(channelStatus))[m
[36m@@ -370,7 +371,7 @@[m [mpublic sealed class ChannelService : IChannelService, IDisposable[m
             return false;[m
         }[m
 [m
[31m-        channelStatus.SetSourceChannel(sourceChannelDistributor, channelStatus.SMStreamInfo.Name, channelStatus.SMStreamInfo.IsCustomStream);[m
[32m+[m[32m        channelStatus.SetSourceChannel(sourceChannelDistributor, channelStatus.SMStreamInfo.Name, channelStatus.CommandProfile, channelStatus.SMStreamInfo.IsCustomStream);[m
 [m
         channelStatus.FailoverInProgress = false;[m
 [m
[1mdiff --git a/StreamMaster.Streams/Factories/ProxyFactory.cs b/StreamMaster.Streams/Factories/ProxyFactory.cs[m
[1mindex dad4b1dd..71139c14 100644[m
[1m--- a/StreamMaster.Streams/Factories/ProxyFactory.cs[m
[1m+++ b/StreamMaster.Streams/Factories/ProxyFactory.cs[m
[36m@@ -21,8 +21,8 @@[m [mpublic sealed class ProxyFactory(ILogger<ProxyFactory> logger, IHTTPStream HTTPS[m
 [m
         try[m
         {[m
[31m-            CommandProfileDto profile = profileService.GetCommandProfile();[m
[31m-            string clientUserAgent = !string.IsNullOrEmpty(smStreamInfo.ClientUserAgent) ? smStreamInfo.ClientUserAgent : settings.CurrentValue.SourceClientUserAgent;[m
[32m+[m[32m            CommandProfileDto profile = smStreamInfo.CommandProfile;// profileService.GetCommandProfile();[m
[32m+[m[32m            string clientUserAgent = !string.IsNullOrEmpty(smStreamInfo.ClientUserAgent) ? smStreamInfo.ClientUserAgent : settings.CurrentValue.ClientUserAgent;[m
 [m
             if (smStreamInfo.IsCustomStream)[m
             {[m
[1mdiff --git a/StreamMaster.Streams/Handlers/ChannelDistributor.cs b/StreamMaster.Streams/Handlers/ChannelDistributor.cs[m
[1mindex b1ade912..893e451d 100644[m
[1m--- a/StreamMaster.Streams/Handlers/ChannelDistributor.cs[m
[1m+++ b/StreamMaster.Streams/Handlers/ChannelDistributor.cs[m
[36m@@ -13,6 +13,7 @@[m [mnamespace StreamMaster.Streams.Handlers[m
     /// </summary>[m
     public class ChannelDistributor : IChannelDistributor[m
     {[m
[32m+[m[32m        public ChannelDistributor() { }[m
         public event EventHandler<ChannelDirectorStopped>? OnStoppedEvent;[m
         public SMStreamInfo SMStreamInfo { get; }[m
         public ConcurrentDictionary<string, Stream> ClientStreams { get; } = new();[m
[36m@@ -76,11 +77,12 @@[m [mnamespace StreamMaster.Streams.Handlers[m
             _latencyHistogram = _meter.CreateHistogram<double>("latency", "ms");[m
         }[m
 [m
[31m-        public ChannelDistributor(ILogger<IChannelDistributor> logger, SMChannelDto smChannelDto)[m
[32m+[m[32m        public ChannelDistributor(ILogger<IChannelDistributor> logger, SMChannelDto smChannelDto, IChannelStatus channelStatus)[m
         {[m
             SourceName = smChannelDto.Name;[m
[32m+[m[32m            SMStreamInfo = SMStreamInfo.NewSMStreamInfo(smChannelDto.Name, channelStatus.CommandProfile, smChannelDto.IsCustomStream);[m
[32m+[m
             _logger = logger;[m
[31m-            SMStreamInfo = SMStreamInfo.NewSMStreamInfo(smChannelDto.Name, smChannelDto.IsCustomStream);[m
             _meter = new Meter("StreamHandlerMetrics", "1.0");[m
             _bytesReadCounter = _meter.CreateCounter<long>("bytes_read");[m
             _kbpsHistogram = _meter.CreateHistogram<double>("kbps", "kbps");[m
[1mdiff --git a/StreamMaster.Streams/Handlers/ChannelDistributorService.cs b/StreamMaster.Streams/Handlers/ChannelDistributorService.cs[m
[1mindex 554511ef..e36ac5ab 100644[m
[1m--- a/StreamMaster.Streams/Handlers/ChannelDistributorService.cs[m
[1m+++ b/StreamMaster.Streams/Handlers/ChannelDistributorService.cs[m
[36m@@ -28,7 +28,7 @@[m [mpublic class ChannelDistributorService(ILogger<ChannelDistributorService> logger[m
             ? null[m
             : !_channelDistributors.TryGetValue(key, out IChannelDistributor? channelDistributor) ? null : channelDistributor;[m
     }[m
[31m-    public async Task<IChannelDistributor?> CreateChannelDistributorFromSMChannelDtoAsync(SMChannelDto smChannel, CancellationToken cancellationToken)[m
[32m+[m[32m    public async Task<IChannelDistributor?> CreateChannelDistributorFromSMChannelDtoAsync(SMChannelDto smChannel, IChannelStatus channelStatus, CancellationToken cancellationToken)[m
     {[m
 [m
         await GetOrCreateSourceChannelDistributorSlim.WaitAsync(cancellationToken).ConfigureAwait(false);[m
[36m@@ -51,7 +51,7 @@[m [mpublic class ChannelDistributorService(ILogger<ChannelDistributorService> logger[m
             }[m
 [m
 [m
[31m-            channelDistributor = new ChannelDistributor(channelDirectorlogger, smChannel);[m
[32m+[m[32m            channelDistributor = new ChannelDistributor(channelDirectorlogger, smChannel, channelStatus);[m
 [m
             if (channelDistributor == null)[m
             {[m
[1mdiff --git a/StreamMaster.Streams/Services/SwitchToNextStreamService.cs b/StreamMaster.Streams/Services/SwitchToNextStreamService.cs[m
[1mindex b9bd080d..14b29de5 100644[m
[1m--- a/StreamMaster.Streams/Services/SwitchToNextStreamService.cs[m
[1m+++ b/StreamMaster.Streams/Services/SwitchToNextStreamService.cs[m
[36m@@ -2,8 +2,18 @@[m
 [m
 namespace StreamMaster.Streams.Services;[m
 [m
[31m-public sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService> logger, IIntroPlayListBuilder introPlayListBuilder, ICustomPlayListBuilder customPlayListBuilder, IOptionsMonitor<Setting> intSettings, IServiceProvider serviceProvider) : ISwitchToNextStreamService[m
[32m+[m
[32m+[m[32mpublic sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService> logger, IOptionsMonitor<CommandProfiles> optionsOutputProfiles, IIntroPlayListBuilder introPlayListBuilder, ICustomPlayListBuilder customPlayListBuilder, IOptionsMonitor<Setting> intSettings, IServiceProvider serviceProvider) : ISwitchToNextStreamService[m
 {[m
[32m+[m[32m    private static string GetClientUserAgenet(SMChannelDto smChannel, SMStreamDto smStream, Setting setting)[m
[32m+[m[32m    {[m
[32m+[m[32m        string clientUserAgent =[m
[32m+[m[32m        !string.IsNullOrEmpty(smStream.ClientUserAgent) ? smStream.ClientUserAgent :[m
[32m+[m[32m        !string.IsNullOrEmpty(smChannel.ClientUserAgent) ? smChannel.ClientUserAgent :[m
[32m+[m[32m           setting.ClientUserAgent;[m
[32m+[m
[32m+[m[32m        return clientUserAgent;[m
[32m+[m[32m    }[m
     public async Task<bool> SetNextStreamAsync(IStreamStatus ChannelStatus, string? OverrideSMStreamId = null)[m
     {[m
         ChannelStatus.FailoverInProgress = true;[m
[36m@@ -22,7 +32,7 @@[m [mpublic sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService>[m
                 )[m
             {[m
                 CustomStreamNfo? intro = introPlayListBuilder.GetRandomIntro(ChannelStatus.IsFirst ? null : ChannelStatus.IntroIndex);[m
[31m-[m
[32m+[m[32m                CommandProfileDto commandProfileDto = optionsOutputProfiles.CurrentValue.GetProfileDto("SMFFMPEG");[m
                 ChannelStatus.IsFirst = false;[m
                 ChannelStatus.PlayedIntro = true;[m
 [m
[36m@@ -36,8 +46,9 @@[m [mpublic sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService>[m
                         Name = intro.Movie.Title,[m
                         Url = intro.VideoFileName,[m
                         IsCustomStream = true,[m
[31m-                        ClientUserAgent = intSettings.CurrentValue.SourceClientUserAgent,[m
[31m-                        M3UFileId = EPGHelper.CustomPlayListId[m
[32m+[m[32m                        ClientUserAgent = intSettings.CurrentValue.ClientUserAgent,[m
[32m+[m[32m                        M3UFileId = EPGHelper.CustomPlayListId,[m
[32m+[m[32m                        CommandProfile = commandProfileDto[m
                     };[m
 [m
                     ChannelStatus.SetSMStreamInfo(siOverRide);[m
[36m@@ -66,7 +77,7 @@[m [mpublic sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService>[m
 [m
             (CustomStreamNfo StreamNfo, int SecondsIn) = customPlayListBuilder.GetCurrentVideoAndElapsedSeconds(ChannelStatus.CustomPlayList.Name);[m
 [m
[31m-            string clientUserAgent = !string.IsNullOrEmpty(ChannelStatus.ClientUserAgent) ? ChannelStatus.ClientUserAgent : intSettings.CurrentValue.SourceClientUserAgent;[m
[32m+[m[32m            string clientUserAgent = !string.IsNullOrEmpty(ChannelStatus.ClientUserAgent) ? ChannelStatus.ClientUserAgent : intSettings.CurrentValue.ClientUserAgent;[m
             SMStreamInfo si = new()[m
             {[m
                 Id = StreamNfo.Movie.Title,[m
[36m@@ -75,7 +86,8 @@[m [mpublic sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService>[m
                 IsCustomStream = true,[m
                 SecondsIn = SecondsIn,[m
                 ClientUserAgent = clientUserAgent,[m
[31m-                M3UFileId = EPGHelper.CustomPlayListId[m
[32m+[m[32m                M3UFileId = EPGHelper.CustomPlayListId,[m
[32m+[m[32m                CommandProfile = ChannelStatus.CommandProfile[m
             };[m
             //SMStreamInfo si = new()[m
             //{[m
[36m@@ -92,6 +104,7 @@[m [mpublic sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService>[m
         }[m
         else[m
         {[m
[32m+[m[32m            SMChannelDto smChannel = ChannelStatus.SMChannel;[m
             if (!string.IsNullOrEmpty(OverrideSMStreamId))[m
             {[m
                 using IServiceScope scope = serviceProvider.CreateScope();[m
[36m@@ -106,7 +119,8 @@[m [mpublic sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService>[m
                     return false;[m
                 }[m
 [m
[31m-                string clientUserAgentOverRide = !string.IsNullOrEmpty(smOverRideStream.ClientUserAgent) ? smOverRideStream.ClientUserAgent : intSettings.CurrentValue.SourceClientUserAgent;[m
[32m+[m[32m                string clientUserAgentOverRide = GetClientUserAgenet(smChannel, smOverRideStream, intSettings.CurrentValue);[m
[32m+[m
 [m
                 logger.LogDebug("Exiting with : {Id} {Name}", smOverRideStream.Id, smOverRideStream.Name);[m
                 SMStreamInfo siOverRide = new()[m
[36m@@ -116,36 +130,37 @@[m [mpublic sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService>[m
                     Url = smOverRideStream.Url,[m
                     IsCustomStream = smOverRideStream.IsCustomStream,[m
                     ClientUserAgent = clientUserAgentOverRide,[m
[31m-                    M3UFileId = smOverRideStream.M3UFileId[m
[32m+[m[32m                    M3UFileId = smOverRideStream.M3UFileId,[m
[32m+[m[32m                    CommandProfile = ChannelStatus.CommandProfile[m
                 };[m
 [m
                 ChannelStatus.SetSMStreamInfo(siOverRide);[m
                 return true;[m
             }[m
 [m
[31m-            SMChannelDto channel = ChannelStatus.SMChannel;[m
[31m-            if (channel.SMStreams.Count == 0)[m
[32m+[m
[32m+[m[32m            if (smChannel.SMStreams.Count == 0)[m
             {[m
[31m-                logger.LogError("SetNextChildVideoStream could not get videoStreams for id {ParentVideoStreamId}", channel.Id);[m
[32m+[m[32m                logger.LogError("SetNextChildVideoStream could not get videoStreams for id {ParentVideoStreamId}", smChannel.Id);[m
                 ChannelStatus.SetSMStreamInfo(null);[m
                 return false;[m
             }[m
 [m
[31m-            if (channel.CurrentRank + 1 >= channel.SMStreams.Count)[m
[32m+[m[32m            if (smChannel.CurrentRank + 1 >= smChannel.SMStreams.Count)[m
             {[m
[31m-                logger.LogInformation("SetNextChildVideoStream no more streams for id {ParentVideoStreamId}, exiting", channel.Id);[m
[32m+[m[32m                logger.LogInformation("SetNextChildVideoStream no more streams for id {ParentVideoStreamId}, exiting", smChannel.Id);[m
                 return false;[m
             }[m
 [m
[31m-            List<SMStreamDto> smStreams = [.. channel.SMStreams.OrderBy(a => a.Rank)];[m
[32m+[m[32m            List<SMStreamDto> smStreams = [.. smChannel.SMStreams.OrderBy(a => a.Rank)];[m
 [m
             //for (int i = 0; i < smStreams.Count; i++)[m
             //{[m
[31m-            channel.CurrentRank = (channel.CurrentRank + 1) % smStreams.Count;[m
[31m-            SMStreamDto smStream = smStreams[channel.CurrentRank];[m
[32m+[m[32m            smChannel.CurrentRank = (smChannel.CurrentRank + 1) % smStreams.Count;[m
[32m+[m[32m            SMStreamDto smStream = smStreams[smChannel.CurrentRank];[m
             logger.LogDebug("Exiting with : {Id} {Name}", smStream.Id, smStream.Name);[m
 [m
[31m-            string clientUserAgent = !string.IsNullOrEmpty(smStream.ClientUserAgent) ? smStream.ClientUserAgent : intSettings.CurrentValue.SourceClientUserAgent;[m
[32m+[m[32m            string clientUserAgent = GetClientUserAgenet(smChannel, smStream, intSettings.CurrentValue);[m
 [m
             SMStreamInfo si = new()[m
             {[m
[36m@@ -154,7 +169,8 @@[m [mpublic sealed class SwitchToNextStreamService(ILogger<SwitchToNextStreamService>[m
                 Url = smStream.Url,[m
                 IsCustomStream = smStream.IsCustomStream,[m
                 ClientUserAgent = clientUserAgent,[m
[31m-                M3UFileId = smStream.M3UFileId[m
[32m+[m[32m                M3UFileId = smStream.M3UFileId,[m
[32m+[m[32m                CommandProfile = ChannelStatus.CommandProfile[m
             };[m
 [m
             ChannelStatus.SetSMStreamInfo(si);[m
[1mdiff --git a/StreamMaster.Streams/Streams/CustomPlayListStream.cs b/StreamMaster.Streams/Streams/CustomPlayListStream.cs[m
[1mindex 893173a3..91c5506f 100644[m
[1m--- a/StreamMaster.Streams/Streams/CustomPlayListStream.cs[m
[1m+++ b/StreamMaster.Streams/Streams/CustomPlayListStream.cs[m
[36m@@ -8,7 +8,9 @@[m [mpublic class CustomPlayListStream(ILogger<CustomPlayListStream> logger, IProfile[m
     public async Task<(Stream? stream, int processId, ProxyStreamError? error)> HandleStream(SMStreamInfo smStreamInfo, string clientUserAgent, CancellationToken cancellationToken)[m
     {[m
         Stopwatch stopwatch = Stopwatch.StartNew();[m
[31m-        CommandProfileDto profile = profileService.GetCommandProfile();[m
[32m+[m[32m        CommandProfileDto profile = profileService.GetCommandProfile("SMFFMPEG");[m
[32m+[m
[32m+[m
 [m
         stopwatch.Stop();[m
         logger.LogInformation("Opened custom stream for {streamName} in {ElapsedMilliseconds} ms", smStreamInfo.Name, stopwatch.ElapsedMilliseconds);[m
[1mdiff --git a/StreamMaster.Streams/Streams/HLSRunner.cs b/StreamMaster.Streams/Streams/HLSRunner.cs[m
[1mindex 450414d2..6854c247 100644[m
[1m--- a/StreamMaster.Streams/Streams/HLSRunner.cs[m
[1m+++ b/StreamMaster.Streams/Streams/HLSRunner.cs[m
[36m@@ -98,7 +98,7 @@[m [mnamespace StreamMaster.Streams.Streams[m
                 string args = hlssettings.HLSFFMPEGOptions;[m
                 if (channelStatus.SMStreamInfo.Url.Contains("://"))[m
                 {[m
[31m-                    string clientUserAgent = !string.IsNullOrEmpty(channelStatus.SMStreamInfo.ClientUserAgent) ? channelStatus.SMStreamInfo.ClientUserAgent : settings.SourceClientUserAgent;[m
[32m+[m[32m                    string clientUserAgent = !string.IsNullOrEmpty(channelStatus.SMStreamInfo.ClientUserAgent) ? channelStatus.SMStreamInfo.ClientUserAgent : settings.ClientUserAgent;[m
                     args += $" -user_agent \"{clientUserAgent}\"";[m
                 }[m
 [m
[1mdiff --git a/streammasterwebui/components/m3u/M3UFileDialog.tsx b/streammasterwebui/components/m3u/M3UFileDialog.tsx[m
[1mindex 6a265086..18bb555c 100644[m
[1m--- a/streammasterwebui/components/m3u/M3UFileDialog.tsx[m
[1m+++ b/streammasterwebui/components/m3u/M3UFileDialog.tsx[m
[36m@@ -64,12 +64,14 @@[m [mconst M3UFileDialog = forwardRef<M3UFileDialogRef, M3UFileDialogProperties>([m
     const defaultValues = useMemo([m
       () =>[m
         ({[m
[32m+[m[32m          AutoSetChannelNumbers: false,[m
           AutoUpdate: true,[m
           DefaultStreamGroupName: null,[m
           HoursToUpdate: 72,[m
           MaxStreamCount: 1,[m
           Name: '',[m
           SyncChannels: false,[m
[32m+[m[32m          StartingChannelNumber: 0,[m
           Url: ''[m
         } as M3UFileDto),[m
       [][m
[36m@@ -221,7 +223,32 @@[m [mconst M3UFileDialog = forwardRef<M3UFileDialogRef, M3UFileDialogProperties>([m
         )}[m
         <div className="w-12">[m
           <div className="flex gap-1">[m
[31m-            <div className="sm-border-right pr-1 w-7 flex flex-row gap-1">[m
[32m+[m[32m            <div className="pr-1 w-7 flex flex-row gap-1">[m
[32m+[m[32m              <div className="w-3">[m
[32m+[m[32m                <BooleanEditor[m
[32m+[m[32m                  label="Set Ch #s"[m
[32m+[m[32m                  onChange={(e) => updateStateAndRequest({ AutoSetChannelNumbers: e })}[m
[32m+[m[32m                  checked={m3uFileDto?.AutoSetChannelNumbers}[m
[32m+[m[32m                />[m
[32m+[m[32m              </div>[m
[32m+[m[32m              <div>[m
[32m+[m[32m                <NumberEditor[m
[32m+[m[32m                  // disabled={!m3uFileDto?.AutoSetChannelNumbers}[m
[32m+[m[32m                  darkBackGround[m
[32m+[m[32m                  disableDebounce[m
[32m+[m[32m                  label="Starting Channel #"[m
[32m+[m[32m                  onChange={(e) => updateStateAndRequest({ StartingChannelNumber: e })}[m
[32m+[m[32m                  showButtons[m
[32m+[m[32m                  value={m3uFileDto?.StartingChannelNumber}[m
[32m+[m[32m                />[m
[32m+[m[32m              </div>[m
[32m+[m[32m            </div>[m
[32m+[m[32m            <div className="w-5">[m
[32m+[m[32m              <M3UFileTags vodTags={m3uFileDto?.VODTags} onChange={(e) => updateStateAndRequest({ VODTags: e })} />[m
[32m+[m[32m            </div>[m
[32m+[m[32m          </div>[m
[32m+[m[32m          <div className="flex gap-1">[m
[32m+[m[32m            <div className="pr-1 w-7 flex flex-row gap-1">[m
               <div className="w-5">[m
                 <BooleanEditor label="Sync Channels" onChange={(e) => updateStateAndRequest({ SyncChannels: e })} checked={m3uFileDto?.SyncChannels} />[m
               </div>[m
[36m@@ -238,9 +265,9 @@[m [mconst M3UFileDialog = forwardRef<M3UFileDialogRef, M3UFileDialogProperties>([m
                 />[m
               </div>[m
             </div>[m
[31m-            <div className="w-5">[m
[32m+[m[32m            {/* <div className="w-5">[m
               <M3UFileTags vodTags={m3uFileDto?.VODTags} onChange={(e) => updateStateAndRequest({ VODTags: e })} />[m
[31m-            </div>[m
[32m+[m[32m            </div> */}[m
           </div>[m
           <div className="layout-padding-bottom-lg" />[m
         </div>[m
[1mdiff --git a/streammasterwebui/components/m3u/M3UFileEditDialog.tsx b/streammasterwebui/components/m3u/M3UFileEditDialog.tsx[m
[1mindex 9996bf4d..ef11623e 100644[m
[1m--- a/streammasterwebui/components/m3u/M3UFileEditDialog.tsx[m
[1m+++ b/streammasterwebui/components/m3u/M3UFileEditDialog.tsx[m
[36m@@ -46,7 +46,7 @@[m [mconst M3UFileEditDialog = ({ selectedFile }: M3UFileEditDialogProperties) => {[m
   return ([m
     <SMPopUp[m
       buttonClassName="icon-yellow"[m
[31m-      contentWidthSize="4"[m
[32m+[m[32m      contentWidthSize="5"[m
       onOkClick={onSave}[m
       header={[m
         <div className="flex w-12 gap-1 justify-content-end align-content-center">[m
[1mdiff --git a/streammasterwebui/components/smDataTable/SMDataTable.tsx b/streammasterwebui/components/smDataTable/SMDataTable.tsx[m
[1mindex 5d58a19e..459ae1c0 100644[m
[1m--- a/streammasterwebui/components/smDataTable/SMDataTable.tsx[m
[1m+++ b/streammasterwebui/components/smDataTable/SMDataTable.tsx[m
[36m@@ -36,6 +36,7 @@[m [mimport useSMDataSelectorValuesState from './hooks/useSMDataTableState';[m
 import { useSetQueryFilter } from './hooks/useSetQueryFilter';[m
 import { ColumnMeta } from './types/ColumnMeta';[m
 import { SMDataTableProps, SMDataTableRef } from './types/smDataTableInterfaces';[m
[32m+[m[32mimport { Logger } from '@lib/common/logger';[m
 [m
 const SMDataTable = <T extends DataTableValue>(props: SMDataTableProps<T>, ref: React.Ref<SMDataTableRef<T>>) => {[m
   const { state, setters } = useSMDataSelectorValuesState<T>(props.id, props.selectedItemsKey);[m
[36m@@ -49,8 +50,9 @@[m [mconst SMDataTable = <T extends DataTableValue>(props: SMDataTableProps<T>, ref:[m
   const [dataSource, setDataSource] = useState<T[]>([]);[m
   const { setSelectedSMChannel } = useSelectedSMItems();[m
 [m
[32m+[m[32m  // Logger.debug('SMDataTable', state.sortField, state.sortInfo);[m
   useEffect(() => {[m
[31m-    if (!props.defaultSortField || state.sortInfo === undefined || state.sortInfo.sortField === undefined) {[m
[32m+[m[32m    if (!props.defaultSortField || state.sortInfo === undefined || state.sortInfo.sortField !== undefined) {[m
       return;[m
     }[m
 [m
[36m@@ -289,7 +291,8 @@[m [mconst SMDataTable = <T extends DataTableValue>(props: SMDataTableProps<T>, ref:[m
           icon={getSortIcon(options.field)}[m
           onClick={() => {[m
             setters.setSortField(options.field);[m
[31m-            setters.setSortOrder(state.sortOrder === 1 ? -1 : 1);[m
[32m+[m[32m            setters.setSortInfo(options.field, state.sortOrder === 1 ? -1 : 1);[m
[32m+[m[32m            //  setters.setSortOrder(state.sortOrder === 1 ? -1 : 1);[m
           }}[m
         />[m
       );[m
[36m@@ -506,11 +509,24 @@[m [mconst SMDataTable = <T extends DataTableValue>(props: SMDataTableProps<T>, ref:[m
         filteredData = filteredData.sort((a: any, b: any) => {[m
           const aSelected = selectedItems.includes(a.Id);[m
           const bSelected = selectedItems.includes(b.Id);[m
[31m-          // Logger.debug('DataTable', { aSelected, bSelected });[m
           if (aSelected && !bSelected) return -1 * state.sortOrder;[m
           if (!aSelected && bSelected) return 1 * state.sortOrder;[m
           return 0;[m
         });[m
[32m+[m[32m      } else if (state.sortField === 'ChannelNumber') {[m
[32m+[m[32m        filteredData = filteredData.sort((a: any, b: any) => {[m
[32m+[m[32m          const sortField = state.sortField as keyof typeof a;[m
[32m+[m[32m          const aValue = a[sortField];[m
[32m+[m[32m          const bValue = b[sortField];[m
[32m+[m
[32m+[m[32m          // Ensure the values are compared as numbers[m
[32m+[m[32m          const aNumber = typeof aValue === 'number' ? aValue : parseFloat(aValue);[m
[32m+[m[32m          const bNumber = typeof bValue === 'number' ? bValue : parseFloat(bValue);[m
[32m+[m
[32m+[m[32m          if (aNumber < bNumber) return -1 * state.sortOrder;[m
[32m+[m[32m          if (aNumber > bNumber) return 1 * state.sortOrder;[m
[32m+[m[32m          return 0;[m
[32m+[m[32m        });[m
       } else {[m
         filteredData = filteredData.sort((a: any, b: any) => {[m
           const sortField = state.sortField as keyof typeof a;[m
[1mdiff --git a/streammasterwebui/components/smDataTable/hooks/useSMDataTableState.tsx b/streammasterwebui/components/smDataTable/hooks/useSMDataTableState.tsx[m
[1mindex b3a85d16..91e353b2 100644[m
[1m--- a/streammasterwebui/components/smDataTable/hooks/useSMDataTableState.tsx[m
[1m+++ b/streammasterwebui/components/smDataTable/hooks/useSMDataTableState.tsx[m
[36m@@ -15,7 +15,7 @@[m [mimport { PagedResponse } from '@lib/smAPI/smapiTypes';[m
 import { ColumnMeta } from '../types/ColumnMeta';[m
 [m
 const SMDataTableState = <T extends DataTableValue>(id: string, selectedItemsKey?: string) => {[m
[31m-  const { sortInfo, setSortInfo } = useSortInfo(id);[m
[32m+[m[32m  const { sortInfo, setSortInfo: hookSetSortInfo } = useSortInfo(id);[m
   const { showHidden } = useShowHidden(id);[m
   const { showSelected } = useShowSelected(id);[m
   const { showSelections, setShowSelections } = useShowSelections(id);[m
[36m@@ -36,16 +36,21 @@[m [mconst SMDataTableState = <T extends DataTableValue>(id: string, selectedItemsKey[m
   const [expandedRows, setExpandedRows] = useState<DataTableExpandedRows>();[m
 [m
   const setSortField = (value: string) => {[m
[31m-    setSortInfo({[m
[32m+[m[32m    const toset = {[m
       ...sortInfo,[m
       sortField: value[m
[31m-    });[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    hookSetSortInfo(toset);[m
   };[m
 [m
   const setSortOrder = (value: -1 | 0 | 1) => {[m
[31m-    setSortInfo({ ...sortInfo, sortOrder: value });[m
[32m+[m[32m    hookSetSortInfo({ ...sortInfo, sortOrder: value });[m
   };[m
 [m
[32m+[m[32m  const setSortInfo = (field: string, sortOrder: -1 | 0 | 1) => {[m
[32m+[m[32m    hookSetSortInfo({ sortField: field, sortOrder });[m
[32m+[m[32m  };[m
   const sortField = sortInfo?.sortField ?? '';[m
   const sortOrder = sortInfo?.sortOrder ?? 1;[m
 [m
[36m@@ -64,6 +69,7 @@[m [mconst SMDataTableState = <T extends DataTableValue>(id: string, selectedItemsKey[m
       setShowSelections,[m
       setSMTableIsSimple,[m
       setSortField,[m
[32m+[m[32m      setSortInfo,[m
       setSortOrder,[m
       setVisibleColumns[m
     },[m
[1mdiff --git a/streammasterwebui/components/smchannels/SMChannelDialog.tsx b/streammasterwebui/components/smchannels/SMChannelDialog.tsx[m
[1mindex 714e7172..385b20e6 100644[m
[1m--- a/streammasterwebui/components/smchannels/SMChannelDialog.tsx[m
[1m+++ b/streammasterwebui/components/smchannels/SMChannelDialog.tsx[m
[36m@@ -46,6 +46,7 @@[m [mconst SMChannelDialog = forwardRef<SMChannelDialogRef, SMChannelDialogProperties[m
       request.Logo !== smChannel.Logo ||[m
       request.Group !== smChannel.Group ||[m
       request.CommandProfileName !== smChannel.CommandProfileName ||[m
[32m+[m[32m      request.ClientUserAgent !== smChannel.ClientUserAgent ||[m
       request.ChannelNumber !== smChannel.ChannelNumber ||[m
       request.EPGId !== smChannel.EPGId[m
     );[m
[36m@@ -71,6 +72,15 @@[m [mconst SMChannelDialog = forwardRef<SMChannelDialogRef, SMChannelDialogProperties[m
     [request.Name][m
   );[m
 [m
[32m+[m[32m  const setClientUserAgent = useCallback([m
[32m+[m[32m    (value: string) => {[m
[32m+[m[32m      if (request.Name !== value) {[m
[32m+[m[32m        setRequest((prevRequest) => ({ ...prevRequest, ClientUserAgent: value }));[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
[32m+[m[32m    [request.Name][m
[32m+[m[32m  );[m
[32m+[m
   const setLogo = useCallback([m
     (value: string) => {[m
       if (request.Logo !== value) {[m
[36m@@ -185,6 +195,21 @@[m [mconst SMChannelDialog = forwardRef<SMChannelDialogRef, SMChannelDialogProperties[m
                 <StreamingProxyTypeSelector darkBackGround label="Proxy" data={tempSMChannel} onChange={(e) => setCommandProfileName(e)} />[m
               </div>[m
             </div>[m
[32m+[m[32m            <div className="flex w-12 gap-1">[m
[32m+[m[32m              <div className="w-6 justify-content-start align-items-center">[m
[32m+[m[32m                <StringEditor[m
[32m+[m[32m                  autoFocus[m
[32m+[m[32m                  label="Client User Agent"[m
[32m+[m[32m                  darkBackGround[m
[32m+[m[32m                  disableDebounce[m
[32m+[m[32m                  onChange={(e) => e !== undefined && setClientUserAgent(e)}[m
[32m+[m[32m                  onSave={() => {[m
[32m+[m[32m                    doSave();[m
[32m+[m[32m                  }}[m
[32m+[m[32m                  value={request.ClientUserAgent}[m
[32m+[m[32m                />[m
[32m+[m[32m              </div>[m
[32m+[m[32m            </div>[m
           </div>[m
 [m
           <div className="w-3 flex flex-column justify-content-start align-items-center ">[m
[1mdiff --git a/streammasterwebui/components/smstreams/columns/useSMStreamChannelGroupColumnConfig.tsx b/streammasterwebui/components/smstreams/columns/useSMStreamChannelGroupColumnConfig.tsx[m
[1mindex 02712bd0..6c3e0213 100644[m
[1m--- a/streammasterwebui/components/smstreams/columns/useSMStreamChannelGroupColumnConfig.tsx[m
[1m+++ b/streammasterwebui/components/smstreams/columns/useSMStreamChannelGroupColumnConfig.tsx[m
[36m@@ -54,7 +54,7 @@[m [mexport const useSMStreamChannelGroupColumnConfig = ({ dataKey }: SMStreamGroupCo[m
     }[m
 [m
     const columnConfig: ColumnMeta = {[m
[31m-      align: 'left',[m
[32m+[m[32m      align: 'right',[m
       field: 'Group',[m
       filter: true,[m
       filterElement: filterTemplate,[m
[1mdiff --git a/streammasterwebui/components/smstreams/columns/useSMStreamM3UColumnConfig.tsx b/streammasterwebui/components/smstreams/columns/useSMStreamM3UColumnConfig.tsx[m
[1mindex b3f22ba4..78f4726e 100644[m
[1m--- a/streammasterwebui/components/smstreams/columns/useSMStreamM3UColumnConfig.tsx[m
[1m+++ b/streammasterwebui/components/smstreams/columns/useSMStreamM3UColumnConfig.tsx[m
[36m@@ -96,7 +96,7 @@[m [mexport const useSMStreamM3UColumnConfig = ({ className = 'sm-w-7rem', dataKey }:[m
   }[m
 [m
   const columnConfig: ColumnMeta = {[m
[31m-    align: 'left',[m
[32m+[m[32m    align: 'right',[m
     field: 'M3UFileName',[m
     filter: true,[m
     filterElement: filterTemplate,[m
[1mdiff --git a/streammasterwebui/features/settings/StreamingSettings.tsx b/streammasterwebui/features/settings/StreamingSettings.tsx[m
[1mindex b805ddfc..9a486ecd 100644[m
[1m--- a/streammasterwebui/features/settings/StreamingSettings.tsx[m
[1m+++ b/streammasterwebui/features/settings/StreamingSettings.tsx[m
[36m@@ -67,7 +67,7 @@[m [mexport function StreamingSettings(): React.ReactElement {[m
   return ([m
     <BaseSettings title="STREAMING">[m
       {GetInputNumberLine({ field: 'GlobalStreamLimit' })}[m
[31m-      {GetInputTextLine({ field: 'StreamingClientUserAgent' })}[m
[32m+[m[32m      {GetInputTextLine({ field: 'ClientUserAgent' })}[m
       {GetCheckBoxLine({ field: 'ShowClientHostNames' })}[m
       {GetDropDownLine({ field: 'ShowIntros', options: getIntroOptions() })}[m
       {GetDropDownLine({ field: 'DefaultCommandProfileName', options: DefaultCommandProfileNameOptions })}[m
[1mdiff --git a/streammasterwebui/features/streameditor/SMStreamDataSelector.tsx b/streammasterwebui/features/streameditor/SMStreamDataSelector.tsx[m
[1mindex d8c0ffde..14056bc7 100644[m
[1m--- a/streammasterwebui/features/streameditor/SMStreamDataSelector.tsx[m
[1m+++ b/streammasterwebui/features/streameditor/SMStreamDataSelector.tsx[m
[36m@@ -75,10 +75,11 @@[m [mconst SMStreamDataSelector = ({ enableEdit: propsEnableEdit, height, id, simple[m
 [m
   const columns = useMemo([m
     (): ColumnMeta[] => [[m
[31m-      { field: 'Name', filter: true, sortable: true, width: 300 },[m
[32m+[m[32m      { field: 'Name', filter: true, sortable: true, width: 200 },[m
[32m+[m[32m      { align: 'right', field: 'ChannelNumber', header: '#', sortable: true, width: 40 },[m
       groupColumnConfig,[m
       smStreamM3UColumnConfig,[m
[31m-      { field: 'M3UFileId', fieldType: 'filterOnly' },[m
[32m+[m[32m      { align: 'right', field: 'M3UFileId', fieldType: 'filterOnly' },[m
       { align: 'right', bodyTemplate: actionTemplate, field: 'IsHidden', fieldType: 'actions', header: 'Actions', width: 108 }[m
     ],[m
     [actionTemplate, groupColumnConfig, smStreamM3UColumnConfig][m
[1mdiff --git a/streammasterwebui/lib/locales/MessagesEn.tsx b/streammasterwebui/lib/locales/MessagesEn.tsx[m
[1mindex 7cc31805..573812bb 100644[m
[1m--- a/streammasterwebui/lib/locales/MessagesEn.tsx[m
[1m+++ b/streammasterwebui/lib/locales/MessagesEn.tsx[m
[36m@@ -7,9 +7,9 @@[m [minterface messages_enType {[m
 const MessagesEn: messages_enType = {[m
   'SDSettings.AlternateLogoStyle': 'Alternate Logo Style',[m
   'SDSettings.AlternateSEFormat': 'Alternate Season/Episode Format',[m
[31m-  'SDSettings.AppendEpisodeDesc': 'Append Season and Episode Numbers to the Program Description',[m
[32m+[m[32m  'SDSettings.AppendEpisodeDesc': 'Append Season & Episode #s to the Program Description',[m
   'SDSettings.ArtworkSize': 'Artwork Size Md',[m
[31m-  'SDSettings.ExcludeCastAndCrew': 'Exclude Cast and Crew',[m
[32m+[m[32m  'SDSettings.ExcludeCastAndCrew': 'Exclude Cast & Crew',[m
   'SDSettings.PreferredLogoStyle': 'Preferred Logo Style',[m
   'SDSettings.MaxSubscribedLineups': 'Max Subscribed Lineups',[m
   'SDSettings.PrefixEpisodeDescription': 'Prefix Episode Description',[m
[36m@@ -25,7 +25,7 @@[m [mconst MessagesEn: messages_enType = {[m
   'SDSettings.XmltvAddFillerData': 'Add Filler Data to EPG',[m
   'SDSettings.XmltvExtendedInfoInTitleDescriptions': 'Include Extended Info in Title Descriptions',[m
   'SDSettings.XmltvFillerProgramLength': 'Dummy Program Length (hrs)',[m
[31m-  'SDSettings.XmltvIncludeChannelNumbers': 'Include Channel Numbers in EPG',[m
[32m+[m[32m  'SDSettings.XmltvIncludeChannelNumbers': 'Include Channel #s in EPG',[m
   'SDSettings.XmltvSingleImage': 'Use Single Image for EPG',[m
   add: 'Add',[m
   added: 'Added',[m
[36m@@ -76,7 +76,7 @@[m [mconst MessagesEn: messages_enType = {[m
   m3uSettings: 'M3U Settings',[m
   m3UStationId: 'Enable tvc-guide-stationid',[m
   m3ustreams: 'Streams',[m
[31m-  m3UUseChnoForId: 'Use Channel Number for channel id',[m
[32m+[m[32m  m3UUseChnoForId: 'Use Channel # for channel id',[m
   m3UUseCUIDForChannelID: 'Use CUID for channel id',[m
   matches: 'Matches',[m
   maxConnectRetry: 'Connection Retry Limit',[m
[36m@@ -84,9 +84,9 @@[m [mconst MessagesEn: messages_enType = {[m
   MaxLogFiles: 'Max Log Files',[m
   MaxLogFileSizeMB: 'Max Log Size',[m
   nameregexSettings: 'Name Blacklist',[m
[31m-  numbers: 'Numbers',[m
[32m+[m[32m  Numbers: '#s',[m
   ok: 'OK',[m
[31m-  overWriteM3UChannels: 'Overwrite M3U Channels Numbers',[m
[32m+[m[32m  overWriteM3UChannels: 'Overwrite M3U Channels #s',[m
   password: 'Password',[m
   playlist: 'Playlist',[m
   PrettyEPG: 'Format EPG output',[m
[1mdiff --git a/streammasterwebui/lib/smAPI/smapiTypes.ts b/streammasterwebui/lib/smAPI/smapiTypes.ts[m
[1mindex ccaaba53..b1be2602 100644[m
[1m--- a/streammasterwebui/lib/smAPI/smapiTypes.ts[m
[1m+++ b/streammasterwebui/lib/smAPI/smapiTypes.ts[m
[36m@@ -136,6 +136,7 @@[m [mexport interface IconFileDto[m
 }[m
 export interface M3UFileDto[m
 {[m
[32m+[m	[32mAutoSetChannelNumbers: boolean;[m
 	AutoUpdate: boolean;[m
 	DefaultStreamGroupName?: string;[m
 	Description: string;[m
[36m@@ -148,6 +149,7 @@[m [mexport interface M3UFileDto[m
 	Name: string;[m
 	NeedsUpdate: boolean;[m
 	Source: string;[m
[32m+[m	[32mStartingChannelNumber: number;[m
 	StreamCount: number;[m
 	SyncChannels: boolean;[m
 	Url: string;[m
[36m@@ -191,7 +193,6 @@[m [mexport interface SettingDto[m
 	SDSettings: SDSettings;[m
 	ShowClientHostNames: boolean;[m
 	ShowIntros: string;[m
[31m-	SourceClientUserAgent: string;[m
 	SSLCertPassword: string;[m
 	SSLCertPath: string;[m
 	UiFolder: string;[m
[36m@@ -230,6 +231,7 @@[m [mexport interface SMStreamDto[m
 	APIName: string;[m
 	ChannelNumber: number;[m
 	ClientUserAgent?: string;[m
[32m+[m	[32mCUID: string;[m
 	EPGID: string;[m
 	FilePosition: number;[m
 	Group: string;[m
[36m@@ -250,6 +252,7 @@[m [mexport interface SMStreamDto[m
 export interface SMStreamInfo[m
 {[m
 	ClientUserAgent?: string;[m
[32m+[m	[32mCommandProfile: CommandProfileDto;[m
 	Id: string;[m
 	IsCustomStream: boolean;[m
 	M3UFileId: number;[m
[36m@@ -834,6 +837,7 @@[m [mexport interface CopySMChannelRequest[m
 export interface CreateSMChannelRequest[m
 {[m
 	ChannelNumber?: number;[m
[32m+[m	[32mClientUserAgent?: string;[m
 	CommandProfileName?: string;[m
 	EPGId?: string;[m
 	Group?: string;[m
[36m@@ -939,6 +943,7 @@[m [mexport interface ToggleSMChannelVisibleByParametersRequest[m
 export interface UpdateSMChannelRequest[m
 {[m
 	ChannelNumber?: number;[m
[32m+[m	[32mClientUserAgent?: string;[m
 	CommandProfileName?: string;[m
 	EPGId?: string;[m
 	Group?: string;[m
[36m@@ -1001,7 +1006,6 @@[m [mexport interface UpdateSettingParameters[m
 	ShowIntros?: string;[m
 	SSLCertPassword?: string;[m
 	SSLCertPath?: string;[m
[31m-	StreamingClientUserAgent?: string;[m
 }[m
 export interface UpdateSettingRequest[m
 {[m
[36m@@ -1173,6 +1177,7 @@[m [mexport interface SyncChannelsRequest[m
 }[m
 export interface UpdateM3UFileRequest[m
 {[m
[32m+[m	[32mAutoSetChannelNumbers?: boolean;[m
 	AutoUpdate?: boolean;[m
 	DefaultStreamGroupName?: string;[m
 	HoursToUpdate?: number;[m
[1mdiff --git a/streammasterwebui/package-lock.json b/streammasterwebui/package-lock.json[m
[1mindex ccc7c143..163c4f56 100644[m
[1m--- a/streammasterwebui/package-lock.json[m
[1m+++ b/streammasterwebui/package-lock.json[m
[36m@@ -8,28 +8,28 @@[m
       "name": "streammaster",[m
       "version": "0.1.0",[m
       "dependencies": {[m
[31m-        "@floating-ui/react": "^0.26.19",[m
[32m+[m[32m        "@floating-ui/react": "^0.26.20",[m
         "@microsoft/signalr": "^8.0.7",[m
         "@microsoft/signalr-protocol-msgpack": "^8.0.7",[m
[31m-        "@reduxjs/toolkit": "^2.2.6",[m
[32m+[m[32m        "@reduxjs/toolkit": "^2.2.7",[m
         "@uiw/react-color-sketch": "^2.3.0",[m
[31m-        "@vidstack/react": "^1.11.29",[m
[31m-        "axios": "^1.7.2",[m
[32m+[m[32m        "@vidstack/react": "^1.11.30",[m
[32m+[m[32m        "axios": "^1.7.3",[m
         "crypto-js": "^4.2.0",[m
[31m-        "framer-motion": "^11.3.8",[m
[32m+[m[32m        "framer-motion": "^11.3.21",[m
         "hls.js": "^1.5.13",[m
         "loglevel": "^1.9.1",[m
         "primeicons": "^7.0.0",[m
[31m-        "primereact": "^10.7.0",[m
[32m+[m[32m        "primereact": "^10.8.0",[m
         "react": "^18.3.1",[m
         "react-dom": "^18.3.1",[m
         "react-intl": "^6.6.8",[m
         "react-pro-sidebar": "^1.1.0",[m
         "react-redux": "^9.1.2",[m
[31m-        "react-router-dom": "^6.25.1",[m
[32m+[m[32m        "react-router-dom": "^6.26.0",[m
         "redux": "^5.0.1",[m
         "redux-persist": "^6.0.0",[m
[31m-        "use-debounce": "^10.0.1",[m
[32m+[m[32m        "use-debounce": "^10.0.2",[m
         "uuid": "^9.0.1"[m
       },[m
       "devDependencies": {[m
[36m@@ -62,7 +62,7 @@[m
         "eslint-plugin-unicorn": "^52.0.0",[m
         "eslint-plugin-unused-imports": "^3.2.0",[m
         "primeflex": "^3.3.1",[m
[31m-        "typescript": "^5.5.3",[m
[32m+[m[32m        "typescript": "^5.5.4",[m
         "vite": "^5.3.4"[m
       }[m
     },[m
[36m@@ -3012,13 +3012,13 @@[m
       }[m
     },[m
     "node_modules/@floating-ui/react": {[m
[31m-      "version": "0.26.19",[m
[31m-      "resolved": "https://registry.npmjs.org/@floating-ui/react/-/react-0.26.19.tgz",[m
[31m-      "integrity": "sha512-Jk6zITdjjIvjO/VdQFvpRaD3qPwOHH6AoDHxjhpy+oK4KFgaSP871HYWUAPdnLmx1gQ+w/pB312co3tVml+BXA==",[m
[32m+[m[32m      "version": "0.26.20",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@floating-ui/react/-/react-0.26.20.tgz",[m
[32m+[m[32m      "integrity": "sha512-RixKJJG92fcIsVoqrFr4Onpzh7hlOx4U7NV4aLhMLmtvjZ5oTB/WzXaANYUZATKqXvvW7t9sCxtzejip26N5Ag==",[m
       "license": "MIT",[m
       "dependencies": {[m
         "@floating-ui/react-dom": "^2.1.1",[m
[31m-        "@floating-ui/utils": "^0.2.4",[m
[32m+[m[32m        "@floating-ui/utils": "^0.2.5",[m
         "tabbable": "^6.0.0"[m
       },[m
       "peerDependencies": {[m
[36m@@ -3040,9 +3040,9 @@[m
       }[m
     },[m
     "node_modules/@floating-ui/utils": {[m
[31m-      "version": "0.2.4",[m
[31m-      "resolved": "https://registry.npmjs.org/@floating-ui/utils/-/utils-0.2.4.tgz",[m
[31m-      "integrity": "sha512-dWO2pw8hhi+WrXq1YJy2yCuWoL20PddgGaqTgVe4cOS9Q6qklXCiA1tJEqX6BEwRNSCP84/afac9hd4MS+zEUA==",[m
[32m+[m[32m      "version": "0.2.5",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@floating-ui/utils/-/utils-0.2.5.tgz",[m
[32m+[m[32m      "integrity": "sha512-sTcG+QZ6fdEUObICavU+aB3Mp8HY4n14wYHdxK4fXjPmv3PXZZeY5RaguJmGyeH/CJQhX3fqKUtS4qc1LoHwhQ==",[m
       "license": "MIT"[m
     },[m
     "node_modules/@formatjs/ecma402-abstract": {[m
[36m@@ -3732,9 +3732,9 @@[m
       }[m
     },[m
     "node_modules/@reduxjs/toolkit": {[m
[31m-      "version": "2.2.6",[m
[31m-      "resolved": "https://registry.npmjs.org/@reduxjs/toolkit/-/toolkit-2.2.6.tgz",[m
[31m-      "integrity": "sha512-kH0r495c5z1t0g796eDQAkYbEQ3a1OLYN9o8jQQVZyKyw367pfRGS+qZLkHYvFHiUUdafpoSlQ2QYObIApjPWA==",[m
[32m+[m[32m      "version": "2.2.7",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@reduxjs/toolkit/-/toolkit-2.2.7.tgz",[m
[32m+[m[32m      "integrity": "sha512-faI3cZbSdFb8yv9dhDTmGwclW0vk0z5o1cia+kf7gCbaCwHI5e+7tP57mJUv22pNcNbeA62GSrPpfrUfdXcQ6g==",[m
       "license": "MIT",[m
       "dependencies": {[m
         "immer": "^10.0.3",[m
[36m@@ -3756,9 +3756,9 @@[m
       }[m
     },[m
     "node_modules/@remix-run/router": {[m
[31m-      "version": "1.18.0",[m
[31m-      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.18.0.tgz",[m
[31m-      "integrity": "sha512-L3jkqmqoSVBVKHfpGZmLrex0lxR5SucGA0sUfFzGctehw+S/ggL9L/0NnC5mw6P8HUWpFZ3nQw3cRApjjWx9Sw==",[m
[32m+[m[32m      "version": "1.19.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.19.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-zDICCLKEwbVYTS6TjYaWtHXxkdoUvD/QXvyVZjGCsWz5vyH7aFeONlPffPdW+Y/t6KT0MgXb2Mfjun9YpWN1dA==",[m
       "license": "MIT",[m
       "engines": {[m
         "node": ">=14.0.0"[m
[36m@@ -4676,9 +4676,9 @@[m
       "dev": true[m
     },[m
     "node_modules/@vidstack/react": {[m
[31m-      "version": "1.11.29",[m
[31m-      "resolved": "https://registry.npmjs.org/@vidstack/react/-/react-1.11.29.tgz",[m
[31m-      "integrity": "sha512-Tn9QW0pNjL4WPhWTVo763RwuivPEHkMl+YTz04btz1Qg1JxUgad0SY9OlAF15iEpcjR18b6y6QsQAFeHpqJXxQ==",[m
[32m+[m[32m      "version": "1.11.30",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@vidstack/react/-/react-1.11.30.tgz",[m
[32m+[m[32m      "integrity": "sha512-Y9Xx4Y+bXRtlZKR+PfUGl6UX0rH6Lui5sHzdh0Jj4MZFCWv+hM9h5BaV2k97vLGEYpGDl/11imENCrHFWgR3HA==",[m
       "license": "MIT",[m
       "dependencies": {[m
         "@floating-ui/dom": "^1.4.4",[m
[36m@@ -5012,9 +5012,9 @@[m
       }[m
     },[m
     "node_modules/axios": {[m
[31m-      "version": "1.7.2",[m
[31m-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.2.tgz",[m
[31m-      "integrity": "sha512-2A8QhOMrbomlDuiLeK9XibIBzuHeRcqqNOHp0Cyp5EoJ1IFDh+XZH3A6BkXtv0K4gFGCI0Y4BM7B1wOEi0Rmgw==",[m
[32m+[m[32m      "version": "1.7.3",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/axios/-/axios-1.7.3.tgz",[m
[32m+[m[32m      "integrity": "sha512-Ar7ND9pU99eJ9GpoGQKhKf58GpUOgnzuaB7ueNQ5BMi0p+LZ5oaEnfF999fAArcTIBwXTCHAmGcHOZJaWPq9Nw==",[m
       "license": "MIT",[m
       "dependencies": {[m
         "follow-redirects": "^1.15.6",[m
[36m@@ -7588,9 +7588,9 @@[m
       }[m
     },[m
     "node_modules/framer-motion": {[m
[31m-      "version": "11.3.8",[m
[31m-      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-11.3.8.tgz",[m
[31m-      "integrity": "sha512-1D+RDTsIp4Rz2dq/oToqSEc9idEQwgBRQyBq4rGpFba+0Z+GCbj9z1s0+ikFbanWe3YJ0SqkNlDe08GcpFGj5A==",[m
[32m+[m[32m      "version": "11.3.21",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/framer-motion/-/framer-motion-11.3.21.tgz",[m
[32m+[m[32m      "integrity": "sha512-D+hfIsvzV8eL/iycld4K+tKlg2Q2LdwnrcBEohtGw3cG1AIuNYATbT5RUqIM1ndsAk+EfGhoSGf0UaiFodc5Tw==",[m
       "license": "MIT",[m
       "dependencies": {[m
         "tslib": "^2.4.0"[m
[36m@@ -9484,9 +9484,9 @@[m
       "integrity": "sha512-jK3Et9UzwzTsd6tzl2RmwrVY/b8raJ3QZLzoDACj+oTJ0oX7L9Hy+XnVwgo4QVKlKpnP/Ur13SXV/pVh4LzaDw=="[m
     },[m
     "node_modules/primereact": {[m
[31m-      "version": "10.7.0",[m
[31m-      "resolved": "https://registry.npmjs.org/primereact/-/primereact-10.7.0.tgz",[m
[31m-      "integrity": "sha512-Rx0JaNF7WM+vcSy4sUeLA9nnEAxm5N1P2RhRXEwFpoo9527429kvwZcNanlcJiqY8JCwCaiSnGGPYgVKtGcZCw==",[m
[32m+[m[32m      "version": "10.8.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/primereact/-/primereact-10.8.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-SIbNrSqX/mGLlBcNOrLkw0W3ARioZ5U9rbvApSzUDACS5c576W/RZV2vR3RBH+/tgKFLHmHNokwCfXhXIwyLcw==",[m
       "license": "MIT",[m
       "dependencies": {[m
         "@types/react-transition-group": "^4.4.1",[m
[36m@@ -9669,12 +9669,12 @@[m
       }[m
     },[m
     "node_modules/react-router": {[m
[31m-      "version": "6.25.1",[m
[31m-      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.25.1.tgz",[m
[31m-      "integrity": "sha512-u8ELFr5Z6g02nUtpPAggP73Jigj1mRePSwhS/2nkTrlPU5yEkH1vYzWNyvSnSzeeE2DNqWdH+P8OhIh9wuXhTw==",[m
[32m+[m[32m      "version": "6.26.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.26.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-wVQq0/iFYd3iZ9H2l3N3k4PL8EEHcb0XlU2Na8nEwmiXgIUElEH6gaJDtUQxJ+JFzmIXaQjfdpcGWaM6IoQGxg==",[m
       "license": "MIT",[m
       "dependencies": {[m
[31m-        "@remix-run/router": "1.18.0"[m
[32m+[m[32m        "@remix-run/router": "1.19.0"[m
       },[m
       "engines": {[m
         "node": ">=14.0.0"[m
[36m@@ -9684,13 +9684,13 @@[m
       }[m
     },[m
     "node_modules/react-router-dom": {[m
[31m-      "version": "6.25.1",[m
[31m-      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.25.1.tgz",[m
[31m-      "integrity": "sha512-0tUDpbFvk35iv+N89dWNrJp+afLgd+y4VtorJZuOCXK0kkCWjEvb3vTJM++SYvMEpbVwXKf3FjeVveVEb6JpDQ==",[m
[32m+[m[32m      "version": "6.26.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.26.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-RRGUIiDtLrkX3uYcFiCIxKFWMcWQGMojpYZfcstc63A1+sSnVgILGIm9gNUA6na3Fm1QuPGSBQH2EMbAZOnMsQ==",[m
       "license": "MIT",[m
       "dependencies": {[m
[31m-        "@remix-run/router": "1.18.0",[m
[31m-        "react-router": "6.25.1"[m
[32m+[m[32m        "@remix-run/router": "1.19.0",[m
[32m+[m[32m        "react-router": "6.26.0"[m
       },[m
       "engines": {[m
         "node": ">=14.0.0"[m
[36m@@ -10993,9 +10993,9 @@[m
       }[m
     },[m
     "node_modules/typescript": {[m
[31m-      "version": "5.5.3",[m
[31m-      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.5.3.tgz",[m
[31m-      "integrity": "sha512-/hreyEujaB0w76zKo6717l3L0o/qEUtRgdvUBvlkhoWeOVMjMuHNHk0BRBzikzuGDqNmPQbg5ifMEqsHLiIUcQ==",[m
[32m+[m[32m      "version": "5.5.4",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.5.4.tgz",[m
[32m+[m[32m      "integrity": "sha512-Mtq29sKDAEYP7aljRgtPOpTvOfbwRWlS6dPRzwjdE+C0R4brX/GUyhHSecbHMFLNBLcJIPt9nl9yG5TZ1weH+Q==",[m
       "devOptional": true,[m
       "license": "Apache-2.0",[m
       "bin": {[m
[36m@@ -11128,9 +11128,9 @@[m
       }[m
     },[m
     "node_modules/use-debounce": {[m
[31m-      "version": "10.0.1",[m
[31m-      "resolved": "https://registry.npmjs.org/use-debounce/-/use-debounce-10.0.1.tgz",[m
[31m-      "integrity": "sha512-0uUXjOfm44e6z4LZ/woZvkM8FwV1wiuoB6xnrrOmeAEjRDDzTLQNRFtYHvqUsJdrz1X37j0rVGIVp144GLHGKg==",[m
[32m+[m[32m      "version": "10.0.2",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/use-debounce/-/use-debounce-10.0.2.tgz",[m
[32m+[m[32m      "integrity": "sha512-MwBiJK2dk+2qhMDVDCPRPeLuIekKfH2t1UYMnrW9pwcJJGFDbTLliSMBz2UKGmE1PJs8l3XoMqbIU1MemMAJ8g==",[m
       "license": "MIT",[m
       "engines": {[m
         "node": ">= 16.0.0"[m
[1mdiff --git a/streammasterwebui/package.json b/streammasterwebui/package.json[m
[1mindex 34a18e34..bb5e975d 100644[m
[1m--- a/streammasterwebui/package.json[m
[1m+++ b/streammasterwebui/package.json[m
[36m@@ -1,28 +1,28 @@[m
 {[m
   "type": "module",[m
   "dependencies": {[m
[31m-    "@floating-ui/react": "^0.26.19",[m
[32m+[m[32m    "@floating-ui/react": "^0.26.20",[m
     "@microsoft/signalr": "^8.0.7",[m
     "@microsoft/signalr-protocol-msgpack": "^8.0.7",[m
[31m-    "@reduxjs/toolkit": "^2.2.6",[m
[32m+[m[32m    "@reduxjs/toolkit": "^2.2.7",[m
     "@uiw/react-color-sketch": "^2.3.0",[m
[31m-    "@vidstack/react": "^1.11.29",[m
[31m-    "axios": "^1.7.2",[m
[32m+[m[32m    "@vidstack/react": "^1.11.30",[m
[32m+[m[32m    "axios": "^1.7.3",[m
     "crypto-js": "^4.2.0",[m
[31m-    "framer-motion": "^11.3.8",[m
[32m+[m[32m    "framer-motion": "^11.3.21",[m
     "hls.js": "^1.5.13",[m
     "loglevel": "^1.9.1",[m
     "primeicons": "^7.0.0",[m
[31m-    "primereact": "^10.7.0",[m
[32m+[m[32m    "primereact": "^10.8.0",[m
     "react": "^18.3.1",[m
     "react-dom": "^18.3.1",[m
     "react-intl": "^6.6.8",[m
     "react-pro-sidebar": "^1.1.0",[m
     "react-redux": "^9.1.2",[m
[31m-    "react-router-dom": "^6.25.1",[m
[32m+[m[32m    "react-router-dom": "^6.26.0",[m
     "redux": "^5.0.1",[m
     "redux-persist": "^6.0.0",[m
[31m-    "use-debounce": "^10.0.1",[m
[32m+[m[32m    "use-debounce": "^10.0.2",[m
     "uuid": "^9.0.1"[m
   },[m
   "devDependencies": {[m
[36m@@ -55,7 +55,7 @@[m
     "eslint-plugin-unicorn": "^52.0.0",[m
     "eslint-plugin-unused-imports": "^3.2.0",[m
     "primeflex": "^3.3.1",[m
[31m-    "typescript": "^5.5.3",[m
[32m+[m[32m    "typescript": "^5.5.4",[m
     "vite": "^5.3.4"[m
   },[m
   "eslintConfig": {[m
[36m@@ -86,4 +86,4 @@[m
     "update-dependencies": "npx -y npm-check-updates -u"[m
   },[m
   "version": "0.1.0"[m
[31m-}[m
[32m+[m[32m}[m
\ No newline at end of file[m
